{"mappings":"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","sources":["src/ChessPieces/ChessPiece.ts","src/ChessPieces/Bishop.ts","src/ChessTile.ts","src/ChessPieces/util.ts","src/ChessPieces/Knight.ts","src/ChessPieces/Pawn.ts","src/ChessPieces/Rook.ts","src/ChessPieces/Queen.ts","src/ChessPieces/King.ts","src/Player.ts","src/ChessBoard.ts","src/LightPatterns/RowPattern.ts","src/LightPatterns/SequencePattern.ts","src/LightPatterns/SnakePattern.ts","src/ChessLightsMain.ts"],"sourcesContent":["import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\n\n/**\n * Abstract Base Class for common properties/methods for all of the pieces\n */\nexport default abstract class ChessPiece {\n  abstract pieceSymbol(): string\n  /**\n   * \n   * @param boardState The current board state to find valid moves on\n   */\n  abstract findValidMoves(boardState: ChessBoard): Array<{ x: number; y: number; }>\n  abstract clone(boardTiles:Array<Array<ChessTile>>): ChessPiece\n  public currentTile: ChessTile = null\n\n  constructor(boardTiles: Array<Array<ChessTile>>, x: number, y: number, public color: \"white\" | \"black\" = \"white\") {\n    boardTiles[x][y].currentPiece = this\n    this.currentTile = boardTiles[x][y]\n  }\n\n  get direction() { return this.color === \"white\" ? 1 : -1 }\n\n  get myPos() {\n    return {\n      x: this.currentTile.x,\n      y: this.currentTile.y\n    }\n  }\n\n  toString() {\n    return `${this.pieceSymbol()}`\n  }\n\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Bishop extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♝\" : \"♗\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this\n\n    \n    // All spaces to other \"diaganol 1\"\n    for(let i=myPos.x+1, j=myPos.y+1; i < 8 && j<8; i++, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 2\"\n    for(let i=myPos.x-1, j=myPos.y-1; i >= 0 && j >= 0; i--, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    \n    // All spaces to other \"diaganol 3\"\n    for(let i=myPos.x+1, j=myPos.y-1; i < 8 && j >= 0; i++, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other \"diaganol 4\"\n    for(let i=myPos.x-1, j=myPos.y+1; i >= 0 && j < 8; i--, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    return validPositions\n\n  }\n\n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Bishop(boardTiles, this.currentTile.y,this.currentTile.x, this.color)\n  }\n}","import ChessPiece from \"./ChessPieces/ChessPiece\";\nimport {getFile, getRank} from \"./ChessPieces/util\"\n\nexport default class ChessTile {\n    id: number\n    y: number\n    x: number\n    \n    isValidPosition: boolean\n\n    prevLight: ChessTile;\n    nextLight: ChessTile;\n\n    currentPiece:ChessPiece|null;\n\n    get tileBaseColor () {\n        return (this.id+(this.y%2))%2==0 ? \"black\" : \"white\"\n    }\n\n    constructor(id, x, y, public isOn=false, public hue=0, public saturation=100, public brightness=50) {\n        this.id = id\n        this.x = x\n        this.y = y\n    }\n\n    // Just clones the object with properties needed for checking valid positions\n    // for checking hypothetical board states\n    clone() {\n        return new ChessTile(this.id, this.x, this.y)\n    }\n    toString() {\n        return `${getFile(this.x)}${getRank(this.y)} with Piece ${this.currentPiece}`\n    }\n}","export function getRank(index:number){\n  return ['a','b','c','d','e','f','g','h'][index]\n}\nexport function getFile(index:number){\n  return index+1\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Knight extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♞\" : \"♘\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this\n    \n    let tileOne = boardState.getTileAtPosition(myPos.x+2, myPos.y+1)\n    let tileTwo = boardState.getTileAtPosition(myPos.x+1, myPos.y+2)\n    let tileThree = boardState.getTileAtPosition(myPos.x-2, myPos.y+1)\n    let tileFour = boardState.getTileAtPosition(myPos.x-1, myPos.y+2)\n    \n    let tileFive = boardState.getTileAtPosition(myPos.x-2, myPos.y-1)\n    let tileSix = boardState.getTileAtPosition(myPos.x-1, myPos.y-2)\n    let tileSeven = boardState.getTileAtPosition(myPos.x+2, myPos.y-1)\n    let tileEight = boardState.getTileAtPosition(myPos.x+1, myPos.y-2);\n\n    [tileOne,tileTwo,tileThree,tileFour,tileFive,tileSix,tileSeven,tileEight].forEach(tile=>{\n      // skip if the tile doesn't exist\n      if(!tile) return;\n      // \n      if(!tile.currentPiece || tile.currentPiece.color != this.color) {\n        validPositions.push(tile)\n      }\n    })\n\n\n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Knight(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Pawn extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♟︎\" : \"♙\";\n  \n  public hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos, direction} = this\n\n    let tileTL = boardState.getTileAtPosition(myPos.x+direction, myPos.y+direction)\n    let tileTR = boardState.getTileAtPosition(myPos.x-direction, myPos.y+direction)\n    \n    const addTilePositionIfValid = (tile:ChessTile) => {\n      if(tile && (tile.currentPiece && tile.currentPiece.color!=this.color)) {\n        validPositions.push({x:tile.x,y:tile.y})\n      }\n    }\n\n    [tileTL,tileTR].forEach(tile=>addTilePositionIfValid(tile))\n\n    let pieceOneAhead = boardState.getPieceAtPosition(myPos.x, myPos.y+direction)\n    if(!pieceOneAhead) {\n      validPositions.push({\n        x: myPos.x,\n        y: myPos.y+direction\n      })\n    }\n\n    // Pawn can move two spots if hasn't moved yet\n    if(!this.hasMoved && !pieceOneAhead) {\n      let twoPiecesAhead = boardState.getPieceAtPosition(myPos.x, myPos.y+direction*2)\n      if(!twoPiecesAhead) {\n        validPositions.push({\n          x: myPos.x,\n          y: myPos.y+direction*2\n        })\n      }\n    }\n\n    return validPositions;\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Pawn(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Rook extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♜\" : \"♖\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    // Destructuring props of this\n    const {myPos} = this\n\n    // All spaces to one side \"left\"\n    for(let i=myPos.x-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other side \"right\"\n    for(let i=myPos.x+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to one side \"top\"\n    for(let i=myPos.y-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other side \"bottom\"\n    for(let i=myPos.y+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    return validPositions\n\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Rook(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Queen extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♛\" : \"♕\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this;\n\n    // All spaces to one side \"left\"\n    for(let i=myPos.x-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other side \"right\"\n    for(let i=myPos.x+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to one side \"top\"\n    for(let i=myPos.y-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other side \"bottom\"\n    for(let i=myPos.y+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 1\"\n    for(let i=myPos.x+1, j=myPos.y+1; i < 8 && j<8; i++, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 2\"\n    for(let i=myPos.x-1, j=myPos.y-1; i >= 0 && j >= 0; i--, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    \n    // All spaces to other \"diaganol 3\"\n    for(let i=myPos.x+1, j=myPos.y-1; i < 8 && j >= 0; i++, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other \"diaganol 4\"\n    for(let i=myPos.x-1, j=myPos.y+1; i >= 0 && j < 8; i--, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Queen(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class King extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♚\" : \"♔\";\n  \n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n\n    const {myPos, direction} = this;\n\n    // Cardinal positions\n    let tileOneAbove = boardState.getTileAtPosition(myPos.x, myPos.y+direction)\n    let tileOneBelow = boardState.getTileAtPosition(myPos.x, myPos.y-direction)\n    let tileOneLeft = boardState.getTileAtPosition(myPos.x-1, myPos.y)\n    let tileOneRight = boardState.getTileAtPosition(myPos.x+1, myPos.y)\n\n    // Diaganol moves\n    let tileTL = boardState.getTileAtPosition(myPos.x+direction, myPos.y+direction)\n    let tileBL = boardState.getTileAtPosition(myPos.x+direction, myPos.y-direction)\n    let tileTR = boardState.getTileAtPosition(myPos.x-direction, myPos.y+direction)\n    let tileBR = boardState.getTileAtPosition(myPos.x-direction, myPos.y-direction)\n\n    const addTilePositionIfValid = (tile:ChessTile) => {\n      if(tile && (!tile.currentPiece || (tile.currentPiece && tile.currentPiece.color!=this.color))) {\n        validPositions.push({x:tile.x,y:tile.y})\n      }\n    }\n\n    [tileOneAbove, tileOneBelow, tileOneLeft, tileOneRight, tileTL, tileBL, tileTR, tileBR].forEach(tile => {\n      addTilePositionIfValid(tile)\n    })\n    \n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new King(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessPiece from \"./ChessPieces/ChessPiece\";\nimport King from \"./ChessPieces/King\";\n\nexport default class Player {\n  pieces: Array<ChessPiece> = []\n  inCheck: boolean = false\n  inCheckmate: boolean = false\n  inStalemate: boolean = false\n\n  constructor(public color: \"white\" | \"black\") { }\n  get king() {\n    return this.pieces.find((value,index,obj) => {\n      return value instanceof King\n    })\n  }\n  clone() {\n    return new Player(this.color)\n  }\n  toString() {\n    return `${this.color} player, pieces: ${this.pieces}, in check: ${this.inCheck}, in stalemate: ${this.inStalemate}, in checkmate: ${this.inCheckmate}`\n  }\n}","import Bishop from \"./ChessPieces/Bishop\";\nimport ChessTile from \"./ChessTile\"\nimport Knight from \"./ChessPieces/Knight\";\nimport Pawn from \"./ChessPieces/Pawn\";\nimport Rook from \"./ChessPieces/Rook\";\nimport Queen from \"./ChessPieces/Queen\";\nimport King from \"./ChessPieces/King\";\nimport ChessPiece from \"./ChessPieces/ChessPiece\";\nimport Player from \"./Player\";\nimport ILightPattern from \"./LightPatterns/ILightPattern\";\n\ntype BoardPosition = {\n  x:number\n  y:number\n}\n\n/**\n * Builds the board and keeps track of the game state (selected piece, current player etc)\n * \n * The board is an x/y grid drawn top to bottom left to right\n */\nexport default class ChessBoard {\n  redraw: boolean = true\n  boardTiles: Array<Array<ChessTile>> = []\n  flatTileList: Array<ChessTile> = []\n  players: Array<Player> = []\n  counter = 0\n  selectedPiece: ChessPiece\n\n  get currentPlayersTurn(): \"white\" | \"black\" {\n    return this.currentPlayer.color\n  }\n  currentPlayer: Player\n  get whitePlayer() {\n    return this.players[0]\n  }\n  get blackPlayer() {\n    return this.players[1]\n  }\n\n  constructor(private targetElement:string, autoSetupPieces:boolean = true) {\n    this.setupDataModel()\n    if(autoSetupPieces)\n      this.setupPiecesOnBoard()\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for tile to get (0-7)\n   * @param y Vetical offset from 0 for tile to get (0-7)\n   * @returns A ChessTile if one exists at the position or null if the position is out of bounds\n   */\n  getTileAtPosition(x: number, y: number): ChessTile | null {\n    try {\n      return this.boardTiles[y][x];\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for Piece to get (0-7)\n   * @param y Vertical offset from 0 for Piece to get (0-7)\n   * @returns Piece on tile at given position or null if no piece or invalid tile\n   */\n  getPieceAtPosition(x: number, y: number): ChessPiece | null {\n    try {\n      return this.boardTiles[y][x].currentPiece\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for Piece to select (0-7)\n   * @param y Vertical offset from 0 for Piece to select (0-7)\n   * @returns The selected piece if a piece existed on the tile at the given position or null if no piece or tile at position\n   */\n  selectPiece(x: number, y: number): ChessPiece | null {\n    // Don't return a piece if a tile has a piece, but the piece isn't the same color as the current player\n    this.selectedPiece = this.getPieceAtPosition(x, y)\n\n    // console.log(`Selected Piece: ${this.selectedPiece} on board: ${this.targetElement}`)\n    return this.selectedPiece\n  }\n\n  isPlayerInCheckAfterClonedBoardMove(fromTile: BoardPosition, toTile: BoardPosition):boolean {\n    let clonedBoardState = this.clone()\n    clonedBoardState.movePiecePosition(fromTile, toTile)\n    clonedBoardState.redraw = true\n    clonedBoardState.updateDisplay()\n    return clonedBoardState.checkIfPlayerIsInCheck()\n  }\n\n  /**\n   * Method will move a piece from one tile to another so long as the move\n   * doesn't put or leave the current player's king in check.\n   * \n   * @param fromTile The tile to move the piece from\n   * @param toTile The tile to move the piece to\n   * @returns [boolean] true if the piece was moved false if it was not\n   */\n  movePiece(fromTile: ChessTile, toTile: ChessTile, withChecking:boolean=true): boolean {\n    console.log(`moving piece from: ${fromTile}, to: ${toTile} on board: ${this.targetElement}`)\n\n    // Cloning the current board so can simulate the move and see if the\n    // current players king is left in check\n    if(withChecking)\n    {\n      let willMovePutPlayerIntoCheck = this.isPlayerInCheckAfterClonedBoardMove(fromTile, toTile)\n      console.log(`will move leave player in check ${willMovePutPlayerIntoCheck}`)\n  \n      if(willMovePutPlayerIntoCheck) return false\n    }\n    \n\n    if(toTile.currentPiece) {\n      if(toTile.currentPiece.color==\"white\")\n      this.players[0].pieces = this.players[0].pieces.filter(piece => piece!= toTile.currentPiece)\n      if(toTile.currentPiece.color==\"black\")\n      this.players[1].pieces = this.players[1].pieces.filter(piece => piece!= toTile.currentPiece)\n    }\n    toTile.currentPiece = fromTile.currentPiece\n\n    if (toTile.currentPiece instanceof Pawn) {\n      toTile.currentPiece.hasMoved = true\n      if(toTile.y == 0 || toTile.y==7) {\n        let theNewQueen = new Queen(this.boardTiles, toTile.y, toTile.x, toTile.currentPiece.color)\n        this.currentPlayer.pieces.splice(this.currentPlayer.pieces.indexOf(toTile.currentPiece), 1, theNewQueen)\n        toTile.currentPiece = theNewQueen\n      }\n    }\n\n    fromTile.currentPiece = null\n    toTile.currentPiece.currentTile = toTile\n\n\n    return true\n  }\n\n  // This method doesn't depend on being passed the tile itself necessarily it\n  // will use the given position to find the \n  movePiecePosition(fromPosition: BoardPosition, toPosition: BoardPosition) {\n    let fromTile = this.getTileAtPosition(fromPosition.x, fromPosition.y)\n    let toTile = this.getTileAtPosition(toPosition.x, toPosition.y)\n\n    this.movePiece(fromTile, toTile, false)\n  }\n\n  /**\n   * Sets the isValidPosition to false for all tiles\n   */\n  markAllInvalid() {\n    this.flatTileList.forEach(light => light.isValidPosition = false)\n  }\n\n  /**\n   * Sets up the initial data model(s) for the tiles, creates all the rows\n   * that make up the grid of tiles and populates each row with tiles\n   */\n  setupDataModel() {\n    for (let y = 0; y < 8; y++) {\n      this.makeRow(y)\n    }\n\n    // setup link list references between objects\n    let prevLight\n    for (let i = 0; i < this.flatTileList.length; i++) {\n      const currentLight = this.flatTileList[i];\n      currentLight.prevLight = prevLight\n      if (i < this.flatTileList.length - 1) {\n        currentLight.nextLight = this.flatTileList[i + 1]\n      }\n    }\n\n    this.flatTileList[0].prevLight = this.flatTileList[this.flatTileList.length - 1]\n    this.flatTileList[this.flatTileList.length - 1].nextLight = this.flatTileList[0]\n  }\n\n  setupPiecesOnBoard() {\n    // White back row\n    let whiteRook1 = new Rook(this.boardTiles, 0, 0)\n    let whiteRook2 = new Rook(this.boardTiles, 0, 7)\n\n    let whiteKnight1 = new Knight(this.boardTiles, 0, 1)\n    let whiteKnight2 = new Knight(this.boardTiles, 0, 6)\n\n    let whiteBishop1 = new Bishop(this.boardTiles, 0, 2)\n    let whiteBishop2 = new Bishop(this.boardTiles, 0, 5)\n\n    let whiteQueen = new Queen(this.boardTiles, 0, 3)\n    let whiteKing = new King(this.boardTiles, 0, 4)\n\n    // Black back row\n    let blackRook1 = new Rook(this.boardTiles, 7, 0, \"black\")\n    let blackRook2 = new Rook(this.boardTiles, 7, 7, \"black\")\n\n    let blackKnight1 = new Knight(this.boardTiles, 7, 1, \"black\")\n    let blackKnight2 = new Knight(this.boardTiles, 7, 6, \"black\")\n\n    let blackBishop1 = new Bishop(this.boardTiles, 7, 2, \"black\")\n    let blackBishop2 = new Bishop(this.boardTiles, 7, 5, \"black\")\n\n    let blackQueen = new Queen(this.boardTiles, 7, 3, \"black\")\n    let blackKing = new King(this.boardTiles, 7, 4, \"black\")\n\n    const whitePawns = []\n    const blackPawns = []\n\n    for (let x = 0; x < 8; x++) {\n      // White pawns\n      const whitePawn = new Pawn(this.boardTiles, 1, x)\n      whitePawns.push(whitePawn)\n\n      // Black pawns\n      const blackPawn = new Pawn(this.boardTiles, 6, x, \"black\")\n      blackPawns.push(blackPawn)\n    }\n\n    const player1 = new Player(\"white\")\n    player1.pieces = [whiteRook1, whiteRook2, whiteKnight1, whiteKnight2, whiteBishop1, whiteBishop2, whiteQueen, whiteKing, ...whitePawns]\n\n    const player2 = new Player(\"black\")\n    player2.pieces = [blackRook1, blackRook2, blackKnight1, blackKnight2, blackBishop1, blackBishop2, blackQueen, blackKing, ...blackPawns]\n\n    this.players = [player1, player2]\n\n    this.currentPlayer = player1\n  }\n\n  changeCurrentPlayer() {\n    this.currentPlayer = this.currentPlayer === this.players[0] ? this.players[1] : this.players[0];\n    console.log(`Switched players is now ${this.currentPlayer} turn`)\n  }\n\n  makeRow(rowNum: number) {\n    this.boardTiles[rowNum] = []\n\n    for (let x = 0; x < 8; x++) {\n      const newLightObject = new ChessTile(this.counter++, x, rowNum)\n\n      this.boardTiles[rowNum].push(newLightObject)\n\n      this.flatTileList.push(newLightObject)\n    }\n  }\n\n  checkIfPlayerIsInCheck(targetPlayer:Player = this.currentPlayer):boolean {\n    const otherPlayer = this.whitePlayer == targetPlayer ? this.blackPlayer : this.whitePlayer\n\n    let kingIsInCheck = false\n    otherPlayer.pieces.forEach(piece => {\n      const validMoves = piece.findValidMoves(this)\n      // If king is in check\n      if(targetPlayer.king && validMoves.find(val => val.x == targetPlayer.king.currentTile.x && val.y == targetPlayer.king.currentTile.y) ) {\n        kingIsInCheck = true\n      }\n    })\n    return kingIsInCheck\n  }\n\n  /**\n   * Will see if moving any of the target player's pieces will result in the\n   * player no longer being in check, will be called only if the target players\n   * king is already known to be in check currently\n   * \n   * @param targetPlayer The player to see if cannot make a move to get out of\n   * check mate\n   */\n  cannotMakeAnyMoveWithoutLeavingKingInCheck(targetPlayer:Player = this.currentPlayer) {\n    // For each of the target players pieces we'll clone the board, make the valid move and see if the player\n    // is in check on the cloned board.\n    let anyMoveGetsKingOutofCheck = false\n    targetPlayer.pieces.forEach(piece => {\n      const clonedBoard = this.clone()\n      const validMoves = piece.findValidMoves(clonedBoard)\n      validMoves.forEach(move => {\n        anyMoveGetsKingOutofCheck = anyMoveGetsKingOutofCheck || !clonedBoard.isPlayerInCheckAfterClonedBoardMove(piece.currentTile, move)\n      })\n    })\n    return !anyMoveGetsKingOutofCheck\n  }\n\n\n  clone() {\n    const clonedBoard = new ChessBoard('hypothetical-board', false)\n\n    // Cloning players so can maniuplate their pieces in new board states\n    clonedBoard.players = this.players.map(player=>player.clone())\n\n    clonedBoard.currentPlayer = this.currentPlayer.color == \"white\" ? clonedBoard.whitePlayer : clonedBoard.blackPlayer\n\n\n    // Cloning board tiles so can manipulate what piece is on what tile without \n    // effecting the actual game being played.\n    clonedBoard.boardTiles = this.boardTiles.map<Array<ChessTile>>((rowOfTiles) => {\n        const newRowOfTiles = rowOfTiles.map(singleTile => {\n          const clonedTile = singleTile.clone()\n          if(singleTile.currentPiece) {\n            clonedTile.currentPiece = singleTile.currentPiece.clone(clonedBoard.boardTiles)\n            if(clonedTile.currentPiece) {\n              if(clonedTile.currentPiece.color == \"black\")\n                clonedBoard.blackPlayer.pieces.push(clonedTile.currentPiece)\n              if(clonedTile.currentPiece.color == \"white\")\n                clonedBoard.whitePlayer.pieces.push(clonedTile.currentPiece)\n            }\n          }\n          return clonedTile\n        })\n        return newRowOfTiles\n    })\n    clonedBoard.selectPiece(this.selectedPiece.currentTile.x, this.selectedPiece.currentTile.y)\n    clonedBoard.tileClickHandler(clonedBoard.selectedPiece.currentTile)\n    clonedBoard.drawInitialBoard()\n    clonedBoard.updateDisplay()\n    return clonedBoard\n  }\n\n  tileClickHandler(tile: ChessTile) {\n    if (tile.isValidPosition) {\n      if(this.movePiece(this.selectedPiece.currentTile, tile)) {\n        this.turnOffAllTileLights();\n        this.markAllInvalid();\n        this.currentPlayer.inCheck = this.checkIfPlayerIsInCheck();\n        console.log(`just checked current player is in check ${this.currentPlayer}`)\n        // switching over to other player\n        this.changeCurrentPlayer();\n        // Checking if the new player is now in check.\n        this.currentPlayer.inCheck = this.checkIfPlayerIsInCheck();\n        if(this.currentPlayer.inCheck) {\n          console.log(`Checking if ${this.currentPlayer.color} in checkmate`)\n          this.currentPlayer.inCheckmate = this.cannotMakeAnyMoveWithoutLeavingKingInCheck()\n        } else {\n          console.log(`Checking if ${this.currentPlayer.color} in stalemate`)\n          this.currentPlayer.inStalemate = this.cannotMakeAnyMoveWithoutLeavingKingInCheck()\n        }\n        console.log(`done with checks:\\n${this.currentPlayer}`)\n      }\n    }\n    else {\n      this.markAllInvalid();\n      let selectedPiece = this.selectPiece(tile.x, tile.y)\n      let wasOn = tile.isOn;\n      this.turnOffAllTileLights();\n\n      if (selectedPiece && selectedPiece.color == this.currentPlayersTurn) {\n        tile.isOn = !wasOn\n        if (tile.isOn) {\n          let validMoves = selectedPiece.findValidMoves(this)\n\n          validMoves.forEach(validMove => {\n            // Marking all the valid moves for the selected piece on the board\n            let potentialMovePosition = this.getTileAtPosition(validMove.x, validMove.y)\n            if(potentialMovePosition){\n              potentialMovePosition.isValidPosition = true\n              potentialMovePosition.isOn = true\n            }\n          })\n        }\n      }\n    }\n\n    this.redraw = true\n  }\n  \n\n  /**\n   * return Array of currently lit positions\n   */\n  findCurrentlyLit() {\n    return this.flatTileList.filter(element => element.isOn)\n  }\n\n  /**\n   * Sets the isOn property to false for all tiles\n   */\n  turnOffAllTileLights() {\n    this.flatTileList.forEach(light => light.isOn = false)\n  }\n\n  \n  /**\n   * Called on an interval to update the DOM elements that represent the board\n   * visually based on the board model\n   */\n  updateDisplay(lightMode:ILightPattern = null) {\n\n    // If using a lighting mode then update the tile light pattern on each display update\n    if (lightMode) {\n      lightMode.updatePattern(this)\n      this.redraw = true\n    }\n\n    // If chessboard marked for redraw (after moves) update all the tile styles and contents\n    if(this.redraw) {\n      let gameStatusText = \"\"\n\n      if(this.whitePlayer.inCheck)\n        gameStatusText += \"White player is in check. \"\n      if(this.blackPlayer.inCheck)\n        gameStatusText += \"Black player is in check. \"\n\n      if(this.whitePlayer.inCheckmate)\n        gameStatusText = \"White player is in checkmate. GG\"\n      if(this.blackPlayer.inCheckmate)\n        gameStatusText = \"Black player is in checkmate. GG\"\n\n      if(this.whitePlayer.inStalemate || this.blackPlayer.inStalemate)\n        gameStatusText = \"Game is in stalemate. GG\"\n\n      document.getElementById('game-status').innerHTML = gameStatusText\n\n      this.flatTileList.forEach(tile => {\n  \n        let curTileElm = document.getElementById(`${this.targetElement}-tile-${tile.id}`)\n        const onOrOffTile = tile.isOn ? 'on' : 'off'\n  \n        const newClassName = `chess-tile ${onOrOffTile} tile-color-${tile.tileBaseColor}`\n        if(curTileElm.className != newClassName)\n        curTileElm.className = `chess-tile ${onOrOffTile} tile-color-${tile.tileBaseColor}`\n  \n        if (tile.currentPiece) {\n          curTileElm.style.color = tile.currentPiece.color\n        }\n  \n        let displayText = \"\"\n        if (tile.currentPiece) {\n          displayText = tile.currentPiece.pieceSymbol()\n        }\n  \n        curTileElm.innerHTML = `${displayText}`\n      })\n      this.redraw = false\n    }\n  }\n\n  /**\n   * Clears out and rebuilds the DOM elements for the board based on the board model\n   * deals with finding valid moves and highlighting cells on the board based on the\n   * board model\n   */\n  drawInitialBoard() {\n    let chessBoard = document.getElementById(this.targetElement)\n\n    // Emptying out the elements from the board container\n    while (chessBoard.firstChild) {\n      chessBoard.removeChild(chessBoard.firstChild);\n    }\n\n    // Maps all the tiles row by row into DOM elements\n    const boardRowDOMElms = this.boardTiles\n      .map((tileRow) => {\n\n        // Maps all the cells of a given row into DOM elements\n        const cells = tileRow.map((tile) => {\n          let tileDiv = document.createElement('div')\n          tileDiv.className = `chess-tile ${tile.id % 2 == 0 ? 'even' : 'odd'}  ${tile.isOn ? 'on' : 'off'} tile-color-${tile.tileBaseColor}`\n          tileDiv.id = `${this.targetElement}-tile-${tile.id}`\n\n          tileDiv.addEventListener('click', () => { this.tileClickHandler(tile) })\n          return tileDiv\n        })\n        let rowDiv = document.createElement('div')\n        rowDiv.className = 'row'\n        cells.forEach(cell => { rowDiv.appendChild(cell) })\n        return rowDiv\n      })\n    boardRowDOMElms.forEach(boardRowDOMElm => chessBoard.appendChild(boardRowDOMElm))\n\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class RowPattern implements ILightPattern {\n    currentlyLitLightRow = 0\n    updatePattern(currentBoard:ChessBoard): void {\n        currentBoard.turnOffAllTileLights()\n\n        currentBoard.boardTiles[this.currentlyLitLightRow].forEach(lightData => lightData.isOn = true)\n        this.currentlyLitLightRow++\n        if(this.currentlyLitLightRow >= currentBoard.boardTiles.length) {\n            this.currentlyLitLightRow = 0\n        }\n    }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class SequencePattern implements ILightPattern {\n    firstRun = true\n    constructor() {\n    }\n    updatePattern(currentBoard:ChessBoard): void {\n        if(this.firstRun) {\n            currentBoard.turnOffAllTileLights()\n            currentBoard.flatTileList[0].isOn = true\n            this.firstRun = false\n        }\n        let currentlyLit = currentBoard.findCurrentlyLit()\n        \n        if(currentlyLit.length > 0) {\n\n            for (let i = currentlyLit.length - 1; 0 <= i; i--) {\n                const lightData = currentlyLit[i];\n                \n                lightData.isOn = false;\n                lightData.nextLight.isOn = true;\n            }\n        }\n    }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class SnakePattern implements ILightPattern {\n    snakeHead = 0\n    snakeLength = 12\n    updatePattern(currentBoard:ChessBoard): void {\n        currentBoard.turnOffAllTileLights()\n\n        let snakeHeadElm = currentBoard.flatTileList[this.snakeHead]\n        snakeHeadElm.isOn = true\n\n        let curLight = snakeHeadElm\n        for (let i = 0; i < this.snakeLength; i++) {\n            curLight = curLight.nextLight\n            curLight.isOn = true\n            if(i==0)\n                this.snakeHead = curLight.id\n        }\n    }\n}","import ChessBoard from \"./ChessBoard\"\nimport ILightPattern from \"./LightPatterns/ILightPattern\"\nimport { RowPattern } from \"./LightPatterns/RowPattern\"\nimport { SequencePattern } from \"./LightPatterns/SequencePattern\"\nimport { SnakePattern } from \"./LightPatterns/SnakePattern\"\n\nexport class ChessLightsMain {\n  chessBoard: ChessBoard\n  mode: ILightPattern\n\n  constructor() {\n    // Waiting for page to be loaded to get the elements on the page and add\n    // listeners/setup the game\n    window.addEventListener('DOMContentLoaded', () => {\n\n      // Listener for the drop down menu\n      document.getElementById('mode').addEventListener('change', (event) => {\n        this.changeMode(event)\n      })\n\n      setInterval(() => {\n        this.chessBoard.updateDisplay(this.mode)\n      }, 100)\n\n      this.chessBoard = new ChessBoard('chess-board')\n      this.chessBoard.drawInitialBoard()\n      // this.mode = new SequencePattern()\n    });\n  }\n\n\n  /**\n   * Method handles drop down change events and creates the corresponding light\n   * pattern/sequence handler.  Used primarily for prototyping LED patterns for\n   * LED chess board.\n   * \n   * @param event an event from the select/options dropdown, the event.target.value is used to determine which Pattern instance to create\n   */\n  changeMode(event) {\n    switch (event.target.value) {\n      case 'snake': this.mode = new SnakePattern()\n        break;\n      case 'sequence': this.mode = new SequencePattern()\n        break;\n      case 'row': this.mode = new RowPattern()\n        break;\n      case 'none': this.mode = null\n        break;\n    }\n  }\n  \n}\nnew ChessLightsMain()"],"names":["$b22d20f8eed3c195$export$2e2bcd8739ae039","boardTiles","x","y","color","this","currentTile","currentPiece","direction","myPos","toString","pieceSymbol","$0d26fdf8bf377e35$export$2e2bcd8739ae039","findValidMoves","boardState","validPositions","i","j","curTile","getTileAtPosition","push","i1","j1","i2","j2","i3","j3","clone","$19302002edd8d79c$export$2e2bcd8739ae039","tileBaseColor","id","isOn","hue","saturation","brightness","index","$22951f0e8b3292c6$export$2b71294f39aa2536","$4f1600a5f2f06aab$export$2e2bcd8739ae039","forEach","tile","$f1ffc8d94fc3f9eb$export$2e2bcd8739ae039","tileTL","tileTR","addTilePositionIfValid","pieceOneAhead","getPieceAtPosition","hasMoved","$c374f64110df5620$export$2e2bcd8739ae039","$1ef2ac3924524536$export$2e2bcd8739ae039","i4","i5","i6","i7","$6364cc4a6fd49207$export$2e2bcd8739ae039","tileOneAbove","tileOneBelow","tileOneLeft","tileOneRight","tileBL","tileBR","$ac5fb69ba5837957$export$2e2bcd8739ae039","pieces","inCheck","inCheckmate","inStalemate","king","find","value","obj","$b07460e442fde56f$export$2e2bcd8739ae039","currentPlayersTurn","currentPlayer","whitePlayer","players","blackPlayer","targetElement","autoSetupPieces","redraw","flatTileList","counter","setupDataModel","setupPiecesOnBoard","e","selectPiece","selectedPiece","isPlayerInCheckAfterClonedBoardMove","fromTile","toTile","clonedBoardState","movePiecePosition","updateDisplay","checkIfPlayerIsInCheck","movePiece","withChecking","console","log","willMovePutPlayerIntoCheck","filter","piece","theNewQueen","splice","indexOf","fromPosition","toPosition","markAllInvalid","light","isValidPosition","makeRow","length","currentLight","prevLight","nextLight","whiteRook1","whiteRook2","whiteKnight1","whiteKnight2","whiteBishop1","whiteBishop2","whiteQueen","whiteKing","blackRook1","blackRook2","blackKnight1","blackKnight2","blackBishop1","blackBishop2","blackQueen","blackKing","whitePawns","blackPawns","whitePawn","blackPawn","player1","player2","changeCurrentPlayer","rowNum","newLightObject","targetPlayer","otherPlayer","kingIsInCheck","validMoves","val","cannotMakeAnyMoveWithoutLeavingKingInCheck","anyMoveGetsKingOutofCheck","clonedBoard","move","map","player","rowOfTiles","singleTile","clonedTile","tileClickHandler","drawInitialBoard","turnOffAllTileLights","wasOn","validMove","potentialMovePosition","findCurrentlyLit","element","lightMode","updatePattern","gameStatusText","document","getElementById","innerHTML","curTileElm","onOrOffTile","newClassName","className","style","displayText","chessBoard","firstChild","removeChild","tileRow","cells","tileDiv","createElement","addEventListener","rowDiv","cell","appendChild","boardRowDOMElm","$665c16453abd97af$export$8f903ef488e4ee0f","currentBoard","currentlyLitLightRow","lightData","$848bce31666e74a9$export$8dceea515d6747fc","firstRun","currentlyLit","$d4542aa2ee8a2b32$export$da9194b27e270081","snakeHeadElm","snakeHead","curLight","snakeLength","window","event","changeMode","setInterval","mode","target"],"version":3,"file":"index.58bcdd45.js.map"}