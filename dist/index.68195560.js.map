{"mappings":"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","sources":["src/ChessPieces/ChessPiece.ts","src/ChessPieces/Bishop.ts","src/ChessTile.ts","src/ChessPieces/util.ts","src/ChessPieces/Knight.ts","src/ChessPieces/Pawn.ts","src/ChessPieces/Rook.ts","src/ChessPieces/Queen.ts","src/ChessPieces/King.ts","src/Player.ts","src/ChessBoard.ts","src/LightPatterns/RowPattern.ts","src/LightPatterns/SequencePattern.ts","src/LightPatterns/SnakePattern.ts","src/ChessLightsMain.ts"],"sourcesContent":["import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\n\n/**\n * Abstract Base Class for common properties/methods for all of the pieces\n */\nexport default abstract class ChessPiece {\n  abstract pieceSymbol(): string\n  /**\n   * \n   * @param boardState The current board state to find valid moves on\n   */\n  abstract findValidMoves(boardState: ChessBoard): Array<{ x: number; y: number; }>\n  abstract clone(boardTiles:Array<Array<ChessTile>>): ChessPiece\n  public currentTile: ChessTile = null\n\n  constructor(boardTiles: Array<Array<ChessTile>>, x: number, y: number, public color: \"white\" | \"black\" = \"white\") {\n    boardTiles[x][y].currentPiece = this\n    this.currentTile = boardTiles[x][y]\n  }\n\n  get direction() { return this.color === \"white\" ? 1 : -1 }\n\n  get myPos() {\n    return {\n      x: this.currentTile.x,\n      y: this.currentTile.y\n    }\n  }\n\n  toString() {\n    return `${this.pieceSymbol()}`\n  }\n\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Bishop extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♝\" : \"♗\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this\n\n    \n    // All spaces to other \"diaganol 1\"\n    for(let i=myPos.x+1, j=myPos.y+1; i < 8 && j<8; i++, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 2\"\n    for(let i=myPos.x-1, j=myPos.y-1; i >= 0 && j >= 0; i--, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    \n    // All spaces to other \"diaganol 3\"\n    for(let i=myPos.x+1, j=myPos.y-1; i < 8 && j >= 0; i++, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other \"diaganol 4\"\n    for(let i=myPos.x-1, j=myPos.y+1; i >= 0 && j < 8; i--, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    return validPositions\n\n  }\n\n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Bishop(boardTiles, this.currentTile.y,this.currentTile.x, this.color)\n  }\n}","import ChessPiece from \"./ChessPieces/ChessPiece\";\nimport {getFile, getRank} from \"./ChessPieces/util\"\n\nexport default class ChessTile {\n    id: number\n    y: number\n    x: number\n    \n    isValidPosition: boolean\n\n    prevLight: ChessTile;\n    nextLight: ChessTile;\n\n    currentPiece:ChessPiece|null;\n\n    get tileBaseColor () {\n        return (this.id+(this.y%2))%2==0 ? \"black\" : \"white\"\n    }\n\n    constructor(id, x, y, public isOn=false, public hue=0, public saturation=100, public brightness=50) {\n        this.id = id\n        this.x = x\n        this.y = y\n    }\n\n    // Just clones the object with properties needed for checking valid positions\n    // for checking hypothetical board states\n    clone() {\n        return new ChessTile(this.id, this.x, this.y)\n    }\n    toString() {\n        return `${getFile(this.x)}${getRank(this.y)} with Piece ${this.currentPiece}`\n    }\n}","export function getRank(index:number){\n  return ['a','b','c','d','e','f','g','h'][index]\n}\nexport function getFile(index:number){\n  return index+1\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Knight extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♞\" : \"♘\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this\n    \n    let tileOne = boardState.getTileAtPosition(myPos.x+2, myPos.y+1)\n    let tileTwo = boardState.getTileAtPosition(myPos.x+1, myPos.y+2)\n    let tileThree = boardState.getTileAtPosition(myPos.x-2, myPos.y+1)\n    let tileFour = boardState.getTileAtPosition(myPos.x-1, myPos.y+2)\n    \n    let tileFive = boardState.getTileAtPosition(myPos.x-2, myPos.y-1)\n    let tileSix = boardState.getTileAtPosition(myPos.x-1, myPos.y-2)\n    let tileSeven = boardState.getTileAtPosition(myPos.x+2, myPos.y-1)\n    let tileEight = boardState.getTileAtPosition(myPos.x+1, myPos.y-2);\n\n    [tileOne,tileTwo,tileThree,tileFour,tileFive,tileSix,tileSeven,tileEight].forEach(tile=>{\n      // skip if the tile doesn't exist\n      if(!tile) return;\n      // \n      if(!tile.currentPiece || tile.currentPiece.color != this.color) {\n        validPositions.push(tile)\n      }\n    })\n\n\n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Knight(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Pawn extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♟︎\" : \"♙\";\n  \n  public hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos, direction} = this\n\n    let tileTL = boardState.getTileAtPosition(myPos.x+direction, myPos.y+direction)\n    let tileTR = boardState.getTileAtPosition(myPos.x-direction, myPos.y+direction)\n    \n    const addTilePositionIfValid = (tile:ChessTile) => {\n      if(tile && (tile.currentPiece && tile.currentPiece.color!=this.color)) {\n        validPositions.push({x:tile.x,y:tile.y})\n      }\n    }\n\n    [tileTL,tileTR].forEach(tile=>addTilePositionIfValid(tile))\n\n    let pieceOneAhead = boardState.getPieceAtPosition(myPos.x, myPos.y+direction)\n    if(!pieceOneAhead) {\n      validPositions.push({\n        x: myPos.x,\n        y: myPos.y+direction\n      })\n    }\n\n    // Pawn can move two spots if hasn't moved yet\n    if(!this.hasMoved && !pieceOneAhead) {\n      let twoPiecesAhead = boardState.getPieceAtPosition(myPos.x, myPos.y+direction*2)\n      if(!twoPiecesAhead) {\n        validPositions.push({\n          x: myPos.x,\n          y: myPos.y+direction*2\n        })\n      }\n    }\n\n    return validPositions;\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Pawn(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Rook extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♜\" : \"♖\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    // Destructuring props of this\n    const {myPos} = this\n\n    // All spaces to one side \"left\"\n    for(let i=myPos.x-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other side \"right\"\n    for(let i=myPos.x+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to one side \"top\"\n    for(let i=myPos.y-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other side \"bottom\"\n    for(let i=myPos.y+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    return validPositions\n\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Rook(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Queen extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♛\" : \"♕\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this;\n\n    // All spaces to one side \"left\"\n    for(let i=myPos.x-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other side \"right\"\n    for(let i=myPos.x+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to one side \"top\"\n    for(let i=myPos.y-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other side \"bottom\"\n    for(let i=myPos.y+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 1\"\n    for(let i=myPos.x+1, j=myPos.y+1; i < 8 && j<8; i++, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 2\"\n    for(let i=myPos.x-1, j=myPos.y-1; i >= 0 && j >= 0; i--, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    \n    // All spaces to other \"diaganol 3\"\n    for(let i=myPos.x+1, j=myPos.y-1; i < 8 && j >= 0; i++, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other \"diaganol 4\"\n    for(let i=myPos.x-1, j=myPos.y+1; i >= 0 && j < 8; i--, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Queen(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class King extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♚\" : \"♔\";\n  \n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n\n    const {myPos, direction} = this;\n\n    // Cardinal positions\n    let tileOneAbove = boardState.getTileAtPosition(myPos.x, myPos.y+direction)\n    let tileOneBelow = boardState.getTileAtPosition(myPos.x, myPos.y-direction)\n    let tileOneLeft = boardState.getTileAtPosition(myPos.x-1, myPos.y)\n    let tileOneRight = boardState.getTileAtPosition(myPos.x+1, myPos.y)\n\n    // Diaganol moves\n    let tileTL = boardState.getTileAtPosition(myPos.x+direction, myPos.y+direction)\n    let tileBL = boardState.getTileAtPosition(myPos.x+direction, myPos.y-direction)\n    let tileTR = boardState.getTileAtPosition(myPos.x-direction, myPos.y+direction)\n    let tileBR = boardState.getTileAtPosition(myPos.x-direction, myPos.y-direction)\n\n    const addTilePositionIfValid = (tile:ChessTile) => {\n      if(tile && (!tile.currentPiece || (tile.currentPiece && tile.currentPiece.color!=this.color))) {\n        validPositions.push({x:tile.x,y:tile.y})\n      }\n    }\n\n    [tileOneAbove, tileOneBelow, tileOneLeft, tileOneRight, tileTL, tileBL, tileTR, tileBR].forEach(tile => {\n      addTilePositionIfValid(tile)\n    })\n    \n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new King(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessPiece from \"./ChessPieces/ChessPiece\";\nimport King from \"./ChessPieces/King\";\n\nexport default class Player {\n  pieces: Array<ChessPiece> = []\n  inCheck: boolean\n  inCheckmate: boolean\n\n  constructor(public color: \"white\" | \"black\") { }\n  get king() {\n    return this.pieces.find((value,index,obj) => {\n      return value instanceof King\n    })\n  }\n  clone() {\n    return new Player(this.color)\n  }\n}","import Bishop from \"./ChessPieces/Bishop\";\nimport ChessTile from \"./ChessTile\"\nimport Knight from \"./ChessPieces/Knight\";\nimport Pawn from \"./ChessPieces/Pawn\";\nimport Rook from \"./ChessPieces/Rook\";\nimport Queen from \"./ChessPieces/Queen\";\nimport King from \"./ChessPieces/King\";\nimport ChessPiece from \"./ChessPieces/ChessPiece\";\nimport Player from \"./Player\";\nimport ILightPattern from \"./LightPatterns/ILightPattern\";\n\ntype BoardPosition = {\n  x:number\n  y:number\n}\n\n/**\n * Builds the board and keeps track of the game state (selected piece, current player etc)\n * \n * The board is an x/y grid drawn top to bottom left to right\n */\nexport default class ChessBoard {\n  redraw: boolean = true\n  boardTiles: Array<Array<ChessTile>> = []\n  flatTileList: Array<ChessTile> = []\n  players: Array<Player> = []\n  counter = 0\n  selectedPiece: ChessPiece\n\n  get currentPlayersTurn(): \"white\" | \"black\" {\n    return this.currentPlayer.color\n  }\n  currentPlayer: Player\n  get whitePlayer() {\n    return this.players[0]\n  }\n  get blackPlayer() {\n    return this.players[1]\n  }\n\n  constructor(private targetElement:string, autoSetupPieces:boolean = true) {\n    this.setupDataModel()\n    if(autoSetupPieces)\n      this.setupPiecesOnBoard()\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for tile to get (0-7)\n   * @param y Vetical offset from 0 for tile to get (0-7)\n   * @returns A ChessTile if one exists at the position or null if the position is out of bounds\n   */\n  getTileAtPosition(x: number, y: number): ChessTile | null {\n    try {\n      return this.boardTiles[y][x];\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for Piece to get (0-7)\n   * @param y Vertical offset from 0 for Piece to get (0-7)\n   * @returns Piece on tile at given position or null if no piece or invalid tile\n   */\n  getPieceAtPosition(x: number, y: number): ChessPiece | null {\n    try {\n      return this.boardTiles[y][x].currentPiece\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for Piece to select (0-7)\n   * @param y Vertical offset from 0 for Piece to select (0-7)\n   * @returns The selected piece if a piece existed on the tile at the given position or null if no piece or tile at position\n   */\n  selectPiece(x: number, y: number): ChessPiece | null {\n    // Don't return a piece if a tile has a piece, but the piece isn't the same color as the current player\n    this.selectedPiece = this.getPieceAtPosition(x, y)\n    console.log(`Selected Piece: ${this.selectedPiece}`)\n    return this.selectedPiece\n  }\n\n  isPlayerInCheckAfterClonedBoardMove(fromTile: BoardPosition, toTile: BoardPosition):boolean {\n    let clonedBoardState = this.clone()\n    clonedBoardState.movePiecePosition(fromTile, toTile)\n    clonedBoardState.redraw = true\n    clonedBoardState.updateDisplay()\n    return clonedBoardState.checkIfCurrentPlayerIsInCheck()\n  }\n\n  /**\n   * Method will move a piece from one tile to another so long as the move\n   * doesn't put or leave the current player's king in check.\n   * \n   * @param fromTile The tile to move the piece from\n   * @param toTile The tile to move the piece to\n   * @returns [boolean] true if the piece was moved false if it was not\n   */\n  movePiece(fromTile: ChessTile, toTile: ChessTile, withChecking:boolean=true): boolean {\n    console.log(`moving piece from: ${fromTile}, to: ${toTile}`)\n\n    // Cloning the current board so can simulate the move and see if the\n    // current players king is left in check\n    if(withChecking)\n    {\n      let willMovePutPlayerIntoCheck = this.isPlayerInCheckAfterClonedBoardMove(fromTile, toTile)\n      console.log(`will move leave player in check ${willMovePutPlayerIntoCheck}`)\n  \n      if(willMovePutPlayerIntoCheck) return false\n    }\n    \n\n    if(toTile.currentPiece) {\n      if(toTile.currentPiece.color==\"white\")\n      this.players[0].pieces = this.players[0].pieces.filter(piece => piece!= toTile.currentPiece)\n      if(toTile.currentPiece.color==\"black\")\n      this.players[1].pieces = this.players[1].pieces.filter(piece => piece!= toTile.currentPiece)\n    }\n    toTile.currentPiece = fromTile.currentPiece\n\n    if (toTile.currentPiece instanceof Pawn) {\n      toTile.currentPiece.hasMoved = true\n      if(toTile.y == 0 || toTile.y==7) {\n        toTile.currentPiece = new Queen(this.boardTiles, toTile.y, toTile.x, toTile.currentPiece.color)\n      }\n    }\n\n    fromTile.currentPiece = null\n    toTile.currentPiece.currentTile = toTile\n\n\n    return true\n  }\n\n  // This method doesn't depend on being passed the tile itself necessarily it\n  // will use the given position to find the \n  movePiecePosition(fromPosition: {x:number, y:number}, toPosition: {x: number, y:number}) {\n    let fromTile = this.getTileAtPosition(fromPosition.x, fromPosition.y)\n    let toTile = this.getTileAtPosition(toPosition.x, toPosition.y)\n\n    this.movePiece(fromTile, toTile, false)\n  }\n\n  /**\n   * Sets the isValidPosition to false for all tiles\n   */\n  markAllInvalid() {\n    this.flatTileList.forEach(light => light.isValidPosition = false)\n  }\n\n  /**\n   * Sets up the initial data model(s) for the tiles, creates all the rows\n   * that make up the grid of tiles and populates each row with tiles\n   */\n  setupDataModel() {\n    for (let y = 0; y < 8; y++) {\n      this.makeRow(y)\n    }\n\n    // setup link list references between objects\n    let prevLight\n    for (let i = 0; i < this.flatTileList.length; i++) {\n      const currentLight = this.flatTileList[i];\n      currentLight.prevLight = prevLight\n      if (i < this.flatTileList.length - 1) {\n        currentLight.nextLight = this.flatTileList[i + 1]\n      }\n    }\n\n    this.flatTileList[0].prevLight = this.flatTileList[this.flatTileList.length - 1]\n    this.flatTileList[this.flatTileList.length - 1].nextLight = this.flatTileList[0]\n  }\n\n  setupPiecesOnBoard() {\n    // White back row\n    let whiteRook1 = new Rook(this.boardTiles, 0, 0)\n    let whiteRook2 = new Rook(this.boardTiles, 0, 7)\n\n    let whiteKnight1 = new Knight(this.boardTiles, 0, 1)\n    let whiteKnight2 = new Knight(this.boardTiles, 0, 6)\n\n    let whiteBishop1 = new Bishop(this.boardTiles, 0, 2)\n    let whiteBishop2 = new Bishop(this.boardTiles, 0, 5)\n\n    let whiteQueen = new Queen(this.boardTiles, 0, 3)\n    let whiteKing = new King(this.boardTiles, 0, 4)\n\n    // Black back row\n    let blackRook1 = new Rook(this.boardTiles, 7, 0, \"black\")\n    let blackRook2 = new Rook(this.boardTiles, 7, 7, \"black\")\n\n    let blackKnight1 = new Knight(this.boardTiles, 7, 1, \"black\")\n    let blackKnight2 = new Knight(this.boardTiles, 7, 6, \"black\")\n\n    let blackBishop1 = new Bishop(this.boardTiles, 7, 2, \"black\")\n    let blackBishop2 = new Bishop(this.boardTiles, 7, 5, \"black\")\n\n    let blackQueen = new Queen(this.boardTiles, 7, 3, \"black\")\n    let blackKing = new King(this.boardTiles, 7, 4, \"black\")\n\n    const whitePawns = []\n    const blackPawns = []\n\n    for (let x = 0; x < 8; x++) {\n      // White pawns\n      const whitePawn = new Pawn(this.boardTiles, 1, x)\n      whitePawns.push(whitePawn)\n\n      // Black pawns\n      const blackPawn = new Pawn(this.boardTiles, 6, x, \"black\")\n      blackPawns.push(blackPawn)\n    }\n\n    const player1 = new Player(\"white\")\n    player1.pieces = [whiteRook1, whiteRook2, whiteKnight1, whiteKnight2, whiteBishop1, whiteBishop2, whiteQueen, whiteKing, ...whitePawns]\n\n    const player2 = new Player(\"black\")\n    player2.pieces = [blackRook1, blackRook2, blackKnight1, blackKnight2, blackBishop1, blackBishop2, blackQueen, blackKing, ...blackPawns]\n\n    this.players = [player1, player2]\n\n    this.currentPlayer = player1\n  }\n\n  changeCurrentPlayer() {\n    this.currentPlayer = this.currentPlayer === this.players[0] ? this.players[1] : this.players[0];\n  }\n\n  makeRow(rowNum: number) {\n    this.boardTiles[rowNum] = []\n\n    for (let x = 0; x < 8; x++) {\n      const newLightObject = new ChessTile(this.counter++, x, rowNum)\n\n      this.boardTiles[rowNum].push(newLightObject)\n\n      this.flatTileList.push(newLightObject)\n    }\n  }\n\n  checkIfCurrentPlayerIsInCheck():boolean {\n    return this.checkIfPlayerIsInCheck(this.currentPlayer)\n  }\n\n  checkIfPlayerIsInCheck(targetPlayer:Player):boolean {\n    const otherPlayer = this.whitePlayer == targetPlayer ? this.blackPlayer : this.whitePlayer\n\n    let kingIsInCheck = false\n    otherPlayer.pieces.forEach(piece => {\n      const validMoves = piece.findValidMoves(this)\n      // If king is in check\n      if(targetPlayer.king && validMoves.find(val => val.x == targetPlayer.king.currentTile.x && val.y == targetPlayer.king.currentTile.y) ) {\n        kingIsInCheck = true\n      }\n    })\n    return kingIsInCheck\n  }\n\n  /**\n   * Will see if moving any of the target player's pieces will result in the\n   * player no longer being in check, will be called only if the target players\n   * king is already known to be in check currently\n   * \n   * @param targetPlayer The player to see if cannot make a move to get out of\n   * check mate\n   */\n  checkIfPlayerIsInCheckmate(targetPlayer:Player = this.currentPlayer) {\n    const otherPlayer = this.whitePlayer == targetPlayer ? this.blackPlayer : this.whitePlayer\n    \n    // For each of the target players pieces we'll clone the board, make the valid move and see if the player\n    // is in check on the cloned board.\n    let anyMoveGetsKingOutofCheck = false\n    targetPlayer.pieces.forEach(piece => {\n      const clonedBoard = this.clone()\n      const validMoves = piece.findValidMoves(clonedBoard)\n      validMoves.forEach(move => {\n        anyMoveGetsKingOutofCheck = anyMoveGetsKingOutofCheck || !clonedBoard.isPlayerInCheckAfterClonedBoardMove(piece.currentTile, move)\n      })\n    })\n    return !anyMoveGetsKingOutofCheck\n  }\n\n  clone() {\n    const clonedBoard = new ChessBoard('hypothetical-board', false)\n\n    // Cloning players so can maniuplate their pieces in new board states\n    clonedBoard.players = this.players.map(player=>player.clone())\n\n    clonedBoard.currentPlayer = this.currentPlayer.color == \"white\" ? clonedBoard.whitePlayer : clonedBoard.blackPlayer\n\n\n    // Cloning board tiles so can manipulate what piece is on what tile without \n    // effecting the actual game being played.\n    clonedBoard.boardTiles = this.boardTiles.map<Array<ChessTile>>((rowOfTiles) => {\n        const newRowOfTiles = rowOfTiles.map(singleTile => {\n          const clonedTile = singleTile.clone()\n          if(singleTile.currentPiece) {\n            clonedTile.currentPiece = singleTile.currentPiece.clone(clonedBoard.boardTiles)\n            if(clonedTile.currentPiece) {\n              if(clonedTile.currentPiece.color == \"black\")\n                clonedBoard.blackPlayer.pieces.push(clonedTile.currentPiece)\n              if(clonedTile.currentPiece.color == \"white\")\n                clonedBoard.whitePlayer.pieces.push(clonedTile.currentPiece)\n            }\n          }\n          return clonedTile\n        })\n        return newRowOfTiles\n    })\n    clonedBoard.selectPiece(this.selectedPiece.currentTile.x, this.selectedPiece.currentTile.y)\n    clonedBoard.tileClickHandler(clonedBoard.selectedPiece.currentTile)\n    clonedBoard.drawInitialBoard()\n    return clonedBoard\n  }\n\n  tileClickHandler(tile: ChessTile) {\n    if (tile.isValidPosition) {\n      if(this.movePiece(this.selectedPiece.currentTile, tile)) {\n        this.turnOffAllTileLights();\n        this.markAllInvalid();\n        // Update the inCheck value for current player\n        this.currentPlayer.inCheck = this.checkIfCurrentPlayerIsInCheck();\n        // switching over to other player\n        this.changeCurrentPlayer();\n        // Checking if the new player is now in check.\n        this.currentPlayer.inCheck = this.checkIfCurrentPlayerIsInCheck();\n        if(this.currentPlayer.inCheck) {\n          this.currentPlayer.inCheckmate = this.checkIfPlayerIsInCheckmate()\n        }\n        this.redraw = true\n        this.updateDisplay()\n      }\n    }\n    else {\n      this.markAllInvalid();\n      let selectedPiece = this.selectPiece(tile.x, tile.y)\n      let wasOn = tile.isOn;\n      this.turnOffAllTileLights();\n\n      if (selectedPiece && selectedPiece.color == this.currentPlayersTurn) {\n        tile.isOn = !wasOn\n        if (tile.isOn) {\n          let validMoves = selectedPiece.findValidMoves(this)\n\n          validMoves.forEach(validMove => {\n            // Marking all the valid moves for the selected piece on the board\n            let potentialMovePosition = this.getTileAtPosition(validMove.x, validMove.y)\n            if(potentialMovePosition){\n              potentialMovePosition.isValidPosition = true\n              potentialMovePosition.isOn = true\n            }\n          })\n        }\n      }\n    }\n\n    this.redraw = true\n\n  }\n  \n\n  /**\n   * return Array of currently lit positions\n   */\n  findCurrentlyLit() {\n    return this.flatTileList.filter(element => element.isOn)\n  }\n\n  /**\n   * Sets the isOn property to false for all tiles\n   */\n  turnOffAllTileLights() {\n    this.flatTileList.forEach(light => light.isOn = false)\n  }\n\n  \n  /**\n   * Called on an interval to update the DOM elements that represent the board\n   * visually based on the board model\n   */\n  updateDisplay(lightMode:ILightPattern = null) {\n\n    // If using a lighting mode then update the tile light pattern on each display update\n    if (lightMode) {\n      lightMode.updatePattern(this)\n      this.redraw = true\n    }\n\n    // If chessboard marked for redraw (after moves) update all the tile styles and contents\n    if(this.redraw) {\n      let gameStatusText = \"\"\n\n      if(this.whitePlayer.inCheck)\n        gameStatusText += \"White player is in check. \"\n      if(this.blackPlayer.inCheck)\n        gameStatusText += \"Black player is in check. \"\n\n      if(this.whitePlayer.inCheckmate)\n        gameStatusText = \"White player is in checkmate. GG\"\n      if(this.blackPlayer.inCheckmate)\n        gameStatusText = \"Black player is in checkmate. GG\"\n\n      document.getElementById('game-status').innerHTML = gameStatusText\n\n      this.flatTileList.forEach(tile => {\n  \n        let curTileElm = document.getElementById(`${this.targetElement}-tile-${tile.id}`)\n        const onOrOffTile = tile.isOn ? 'on' : 'off'\n  \n        const newClassName = `chess-tile ${onOrOffTile} tile-color-${tile.tileBaseColor}`\n        if(curTileElm.className != newClassName)\n        curTileElm.className = `chess-tile ${onOrOffTile} tile-color-${tile.tileBaseColor}`\n  \n        if (tile.currentPiece) {\n          curTileElm.style.color = tile.currentPiece.color\n        }\n  \n        let displayText = \"\"\n        if (tile.currentPiece) {\n          displayText = tile.currentPiece.pieceSymbol()\n        }\n  \n        curTileElm.innerHTML = `${displayText}`\n      })\n      this.redraw = false\n    }\n  }\n\n  /**\n   * Clears out and rebuilds the DOM elements for the board based on the board model\n   * deals with finding valid moves and highlighting cells on the board based on the\n   * board model\n   */\n  drawInitialBoard() {\n    let chessBoard = document.getElementById(this.targetElement)\n\n    // Emptying out the elements from the board container\n    while (chessBoard.firstChild) {\n      chessBoard.removeChild(chessBoard.firstChild);\n    }\n\n    // Maps all the tiles row by row into DOM elements\n    const boardRowDOMElms = this.boardTiles\n      .map((tileRow) => {\n\n        // Maps all the cells of a given row into DOM elements\n        const cells = tileRow.map((tile) => {\n          let tileDiv = document.createElement('div')\n          tileDiv.className = `chess-tile ${tile.id % 2 == 0 ? 'even' : 'odd'}  ${tile.isOn ? 'on' : 'off'} tile-color-${tile.tileBaseColor}`\n          tileDiv.id = `${this.targetElement}-tile-${tile.id}`\n\n          tileDiv.addEventListener('click', () => { this.tileClickHandler(tile) })\n          return tileDiv\n        })\n        let rowDiv = document.createElement('div')\n        rowDiv.className = 'row'\n        cells.forEach(cell => { rowDiv.appendChild(cell) })\n        return rowDiv\n      })\n    boardRowDOMElms.forEach(boardRowDOMElm => chessBoard.appendChild(boardRowDOMElm))\n\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class RowPattern implements ILightPattern {\n    currentlyLitLightRow = 0\n    updatePattern(currentBoard:ChessBoard): void {\n        currentBoard.turnOffAllTileLights()\n\n        currentBoard.boardTiles[this.currentlyLitLightRow].forEach(lightData => lightData.isOn = true)\n        this.currentlyLitLightRow++\n        if(this.currentlyLitLightRow >= currentBoard.boardTiles.length) {\n            this.currentlyLitLightRow = 0\n        }\n    }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class SequencePattern implements ILightPattern {\n    firstRun = true\n    constructor() {\n    }\n    updatePattern(currentBoard:ChessBoard): void {\n        if(this.firstRun) {\n            currentBoard.turnOffAllTileLights()\n            currentBoard.flatTileList[0].isOn = true\n            this.firstRun = false\n        }\n        let currentlyLit = currentBoard.findCurrentlyLit()\n        \n        if(currentlyLit.length > 0) {\n\n            for (let i = currentlyLit.length - 1; 0 <= i; i--) {\n                const lightData = currentlyLit[i];\n                \n                lightData.isOn = false;\n                lightData.nextLight.isOn = true;\n            }\n        }\n    }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class SnakePattern implements ILightPattern {\n    snakeHead = 0\n    snakeLength = 12\n    updatePattern(currentBoard:ChessBoard): void {\n        currentBoard.turnOffAllTileLights()\n\n        let snakeHeadElm = currentBoard.flatTileList[this.snakeHead]\n        snakeHeadElm.isOn = true\n\n        let curLight = snakeHeadElm\n        for (let i = 0; i < this.snakeLength; i++) {\n            curLight = curLight.nextLight\n            curLight.isOn = true\n            if(i==0)\n                this.snakeHead = curLight.id\n        }\n    }\n}","import ChessBoard from \"./ChessBoard\"\nimport ILightPattern from \"./LightPatterns/ILightPattern\"\nimport { RowPattern } from \"./LightPatterns/RowPattern\"\nimport { SequencePattern } from \"./LightPatterns/SequencePattern\"\nimport { SnakePattern } from \"./LightPatterns/SnakePattern\"\n\nexport class ChessLightsMain {\n  chessBoard: ChessBoard\n  mode: ILightPattern\n\n  constructor() {\n    // Waiting for page to be loaded to get the elements on the page and add\n    // listeners/setup the game\n    window.addEventListener('DOMContentLoaded', () => {\n\n      // Listener for the drop down menu\n      document.getElementById('mode').addEventListener('change', (event) => {\n        this.changeMode(event)\n      })\n\n      setInterval(() => {\n        this.chessBoard.updateDisplay(this.mode)\n      }, 100)\n\n      this.chessBoard = new ChessBoard('chess-board')\n      this.chessBoard.drawInitialBoard()\n      // this.mode = new SequencePattern()\n    });\n  }\n\n\n  /**\n   * Method handles drop down change events and creates the corresponding light\n   * pattern/sequence handler.  Used primarily for prototyping LED patterns for\n   * LED chess board.\n   * \n   * @param event an event from the select/options dropdown, the event.target.value is used to determine which Pattern instance to create\n   */\n  changeMode(event) {\n    switch (event.target.value) {\n      case 'snake': this.mode = new SnakePattern()\n        break;\n      case 'sequence': this.mode = new SequencePattern()\n        break;\n      case 'row': this.mode = new RowPattern()\n        break;\n      case 'none': this.mode = null\n        break;\n    }\n  }\n  \n}\nnew ChessLightsMain()"],"names":["$b22d20f8eed3c195$export$2e2bcd8739ae039","boardTiles","x","y","color","this","currentTile","currentPiece","direction","myPos","toString","pieceSymbol","$0d26fdf8bf377e35$export$2e2bcd8739ae039","findValidMoves","boardState","validPositions","i","j","curTile","getTileAtPosition","push","i1","j1","i2","j2","i3","j3","clone","$19302002edd8d79c$export$2e2bcd8739ae039","tileBaseColor","id","isOn","hue","saturation","brightness","index","$22951f0e8b3292c6$export$2b71294f39aa2536","$4f1600a5f2f06aab$export$2e2bcd8739ae039","forEach","tile","$f1ffc8d94fc3f9eb$export$2e2bcd8739ae039","tileTL","tileTR","addTilePositionIfValid","pieceOneAhead","getPieceAtPosition","hasMoved","$c374f64110df5620$export$2e2bcd8739ae039","$1ef2ac3924524536$export$2e2bcd8739ae039","i4","i5","i6","i7","$6364cc4a6fd49207$export$2e2bcd8739ae039","tileOneAbove","tileOneBelow","tileOneLeft","tileOneRight","tileBL","tileBR","$ac5fb69ba5837957$export$2e2bcd8739ae039","pieces","king","find","value","obj","$b07460e442fde56f$export$2e2bcd8739ae039","currentPlayersTurn","currentPlayer","whitePlayer","players","blackPlayer","targetElement","autoSetupPieces","redraw","flatTileList","counter","setupDataModel","setupPiecesOnBoard","e","selectPiece","selectedPiece","console","log","isPlayerInCheckAfterClonedBoardMove","fromTile","toTile","clonedBoardState","movePiecePosition","updateDisplay","checkIfCurrentPlayerIsInCheck","movePiece","withChecking","willMovePutPlayerIntoCheck","filter","piece","fromPosition","toPosition","markAllInvalid","light","isValidPosition","makeRow","length","currentLight","prevLight","nextLight","whiteRook1","whiteRook2","whiteKnight1","whiteKnight2","whiteBishop1","whiteBishop2","whiteQueen","whiteKing","blackRook1","blackRook2","blackKnight1","blackKnight2","blackBishop1","blackBishop2","blackQueen","blackKing","whitePawns","blackPawns","whitePawn","blackPawn","player1","player2","changeCurrentPlayer","rowNum","newLightObject","checkIfPlayerIsInCheck","targetPlayer","otherPlayer","kingIsInCheck","validMoves","val","checkIfPlayerIsInCheckmate","anyMoveGetsKingOutofCheck","clonedBoard","move","map","player","rowOfTiles","singleTile","clonedTile","tileClickHandler","drawInitialBoard","turnOffAllTileLights","inCheck","inCheckmate","wasOn","validMove","potentialMovePosition","findCurrentlyLit","element","lightMode","updatePattern","gameStatusText","document","getElementById","innerHTML","curTileElm","onOrOffTile","newClassName","className","style","displayText","chessBoard","firstChild","removeChild","tileRow","cells","tileDiv","createElement","addEventListener","rowDiv","cell","appendChild","boardRowDOMElm","$665c16453abd97af$export$8f903ef488e4ee0f","currentBoard","currentlyLitLightRow","lightData","$848bce31666e74a9$export$8dceea515d6747fc","firstRun","currentlyLit","$d4542aa2ee8a2b32$export$da9194b27e270081","snakeHeadElm","snakeHead","curLight","snakeLength","window","event","changeMode","setInterval","mode","target"],"version":3,"file":"index.68195560.js.map"}