{"mappings":"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","sources":["src/ChessPieces/ChessPiece.ts","src/ChessPieces/Bishop.ts","src/ChessPieces/util.ts","src/ChessTile.ts","src/ChessPieces/Knight.ts","src/ChessPieces/Pawn.ts","src/ChessPieces/Rook.ts","src/ChessPieces/Queen.ts","src/ChessPieces/King.ts","src/Player.ts","src/ChessBoard.ts","src/LightPatterns/RowPattern.ts","src/LightPatterns/SequencePattern.ts","src/LightPatterns/SnakePattern.ts","src/ChessLightsMain.ts"],"sourcesContent":["import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\n\n/**\n * Abstract Base Class for common properties/methods for all of the pieces\n */\nexport default abstract class ChessPiece {\n  abstract pieceSymbol(): string\n  /**\n   * \n   * @param boardState The current board state to find valid moves on\n   */\n  abstract findValidMoves(boardState: ChessBoard): Array<{ x: number; y: number; }>\n  abstract clone(boardTiles:Array<Array<ChessTile>>): ChessPiece\n  public currentTile: ChessTile = null\n\n  constructor(boardTiles: Array<Array<ChessTile>>, x: number, y: number, public color: \"white\" | \"black\" = \"white\", public hasMoved = false) {\n    boardTiles[x][y].currentPiece = this\n    this.currentTile = boardTiles[x][y]\n  }\n\n  get direction() { return this.color === \"white\" ? 1 : -1 }\n\n  get myPos() {\n    return {\n      x: this.currentTile.x,\n      y: this.currentTile.y\n    }\n  }\n\n  toString() {\n    return `${this.pieceSymbol()}`\n  }\n\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Bishop extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♝\" : \"♗\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this\n\n    \n    // All spaces to other \"diaganol 1\"\n    for(let i=myPos.x+1, j=myPos.y+1; i < 8 && j<8; i++, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 2\"\n    for(let i=myPos.x-1, j=myPos.y-1; i >= 0 && j >= 0; i--, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    \n    // All spaces to other \"diaganol 3\"\n    for(let i=myPos.x+1, j=myPos.y-1; i < 8 && j >= 0; i++, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other \"diaganol 4\"\n    for(let i=myPos.x-1, j=myPos.y+1; i >= 0 && j < 8; i--, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    return validPositions\n\n  }\n\n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Bishop(boardTiles, this.currentTile.y,this.currentTile.x, this.color)\n  }\n}","export function getRank(index:number){\n  return ['a','b','c','d','e','f','g','h'][index]\n}\nexport function getFile(index:number){\n  return 8-index\n}","import ChessPiece from \"./ChessPieces/ChessPiece\";\nimport {getFile, getRank} from \"./ChessPieces/util\"\n\nexport default class ChessTile {\n    id: number\n    y: number\n    x: number\n    \n    isValidPosition: boolean\n    canKingSideCastle: boolean\n    canQueenSideCastle: boolean\n\n    prevLight: ChessTile;\n    nextLight: ChessTile;\n\n    currentPiece:ChessPiece|null;\n\n    get tileBaseColor () {\n        return (this.id+(this.y%2))%2==0 ? \"black\" : \"white\"\n    }\n\n    constructor(id, x, y, public isOn=false, public hue=0, public saturation=100, public brightness=50) {\n        this.id = id\n        this.x = x\n        this.y = y\n    }\n\n    // Just clones the object with properties needed for checking valid positions\n    // for checking hypothetical board states\n    clone() {\n        return new ChessTile(this.id, this.x, this.y)\n    }\n    toString() {\n        return `${getFile(this.x)}${getRank(this.y)} with Piece ${this.currentPiece}`\n    }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Knight extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♞\" : \"♘\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this\n    \n    let tileOne = boardState.getTileAtPosition(myPos.x+2, myPos.y+1)\n    let tileTwo = boardState.getTileAtPosition(myPos.x+1, myPos.y+2)\n    let tileThree = boardState.getTileAtPosition(myPos.x-2, myPos.y+1)\n    let tileFour = boardState.getTileAtPosition(myPos.x-1, myPos.y+2)\n    \n    let tileFive = boardState.getTileAtPosition(myPos.x-2, myPos.y-1)\n    let tileSix = boardState.getTileAtPosition(myPos.x-1, myPos.y-2)\n    let tileSeven = boardState.getTileAtPosition(myPos.x+2, myPos.y-1)\n    let tileEight = boardState.getTileAtPosition(myPos.x+1, myPos.y-2);\n\n    [tileOne,tileTwo,tileThree,tileFour,tileFive,tileSix,tileSeven,tileEight].forEach(tile=>{\n      // skip if the tile doesn't exist\n      if(!tile) return;\n      // \n      if(!tile.currentPiece || tile.currentPiece.color != this.color) {\n        validPositions.push(tile)\n      }\n    })\n\n\n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Knight(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Pawn extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♟︎\" : \"♙\";\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos, direction} = this\n\n    let tileTL = boardState.getTileAtPosition(myPos.x+direction, myPos.y+direction)\n    let tileTR = boardState.getTileAtPosition(myPos.x-direction, myPos.y+direction)\n    \n    const addTilePositionIfValid = (tile:ChessTile) => {\n      if(tile && (tile.currentPiece && tile.currentPiece.color!=this.color)) {\n        validPositions.push({x:tile.x,y:tile.y})\n      }\n    }\n\n    [tileTL,tileTR].forEach(tile=>addTilePositionIfValid(tile))\n\n    let pieceOneAhead = boardState.getPieceAtPosition(myPos.x, myPos.y+direction)\n    if(!pieceOneAhead) {\n      validPositions.push({\n        x: myPos.x,\n        y: myPos.y+direction\n      })\n    }\n\n    // Pawn can move two spots if hasn't moved yet\n    if(!this.hasMoved && !pieceOneAhead) {\n      let twoPiecesAhead = boardState.getPieceAtPosition(myPos.x, myPos.y+direction*2)\n      if(!twoPiecesAhead) {\n        validPositions.push({\n          x: myPos.x,\n          y: myPos.y+direction*2\n        })\n      }\n    }\n\n    return validPositions;\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Pawn(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Rook extends ChessPiece {\n  public kingSideRook: boolean = false;\n\n  pieceSymbol = () => this.color==\"black\" ?  \"♜\" : \"♖\";\n  \n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    // Destructuring props of this\n    const {myPos} = this\n\n    // All spaces to one side \"left\"\n    for(let i=myPos.x-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other side \"right\"\n    for(let i=myPos.x+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to one side \"top\"\n    for(let i=myPos.y-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other side \"bottom\"\n    for(let i=myPos.y+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    return validPositions\n\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Rook(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class Queen extends ChessPiece {\n  pieceSymbol = () => this.color==\"black\" ?  \"♛\" : \"♕\";\n  \n  hasMoved:boolean;\n\n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n    const {myPos} = this;\n\n    // All spaces to one side \"left\"\n    for(let i=myPos.x-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other side \"right\"\n    for(let i=myPos.x+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(i, myPos.y)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to one side \"top\"\n    for(let i=myPos.y-1; i >= 0; i--) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other side \"bottom\"\n    for(let i=myPos.y+1; i < 8; i++) {\n      let curTile = boardState.getTileAtPosition(myPos.x, i)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 1\"\n    for(let i=myPos.x+1, j=myPos.y+1; i < 8 && j<8; i++, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n    \n    // All spaces to other \"diaganol 2\"\n    for(let i=myPos.x-1, j=myPos.y-1; i >= 0 && j >= 0; i--, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    \n    // All spaces to other \"diaganol 3\"\n    for(let i=myPos.x+1, j=myPos.y-1; i < 8 && j >= 0; i++, j--) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    // All spaces to other \"diaganol 4\"\n    for(let i=myPos.x-1, j=myPos.y+1; i >= 0 && j < 8; i--, j++) {\n      let curTile = boardState.getTileAtPosition(i, j)\n      // If we run into the same color stop\n      if(curTile.currentPiece && curTile.currentPiece.color == this.color)\n      break;\n\n      // If we run into a piece with a different color include it and stop\n      if(curTile.currentPiece && curTile.currentPiece.color != this.color) {\n        validPositions.push(curTile)\n        break\n      }\n      else if(curTile) {\n        validPositions.push(curTile)\n      }\n    }\n\n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new Queen(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ChessTile from \"../ChessTile\";\nimport ChessPiece from \"./ChessPiece\";\n\nexport default class King extends ChessPiece {\n\n  pieceSymbol = () => this.color==\"black\" ?  \"♚\" : \"♔\";\n  \n  findValidMoves(boardState:ChessBoard): Array<{ x: number; y: number; }> {\n    const validPositions:Array<{x:number, y:number}> = []\n\n    const {myPos, direction} = this;\n\n    // Cardinal positions\n    let tileOneAbove = boardState.getTileAtPosition(myPos.x, myPos.y+direction)\n    let tileOneBelow = boardState.getTileAtPosition(myPos.x, myPos.y-direction)\n    let tileOneLeft = boardState.getTileAtPosition(myPos.x-1, myPos.y)\n    let tileOneRight = boardState.getTileAtPosition(myPos.x+1, myPos.y)\n\n    // Diaganol moves\n    let tileTL = boardState.getTileAtPosition(myPos.x+direction, myPos.y+direction)\n    let tileBL = boardState.getTileAtPosition(myPos.x+direction, myPos.y-direction)\n    let tileTR = boardState.getTileAtPosition(myPos.x-direction, myPos.y+direction)\n    let tileBR = boardState.getTileAtPosition(myPos.x-direction, myPos.y-direction)\n\n    const addTilePositionIfValid = (tile:ChessTile) => {\n      if(tile && (!tile.currentPiece || (tile.currentPiece && tile.currentPiece.color!=this.color))) {\n        validPositions.push({x:tile.x,y:tile.y})\n      }\n    }\n\n    [tileOneAbove, tileOneBelow, tileOneLeft, tileOneRight, tileTL, tileBL, tileTR, tileBR].forEach(tile => {\n      addTilePositionIfValid(tile)\n    })\n    \n    return validPositions\n  }\n  \n  clone(boardTiles:Array<Array<ChessTile>>): ChessPiece {\n    return new King(boardTiles, this.currentTile.y, this.currentTile.x, this.color)\n  }\n}","import ChessPiece from \"./ChessPieces/ChessPiece\";\nimport King from \"./ChessPieces/King\";\nimport Rook from \"./ChessPieces/Rook\";\n\nexport default class Player {\n  pieces: Array<ChessPiece> = []\n  inCheck: boolean = false\n  inCheckmate: boolean = false\n  inStalemate: boolean = false\n  canKingSideCastle: boolean = false\n  canQueenSideCastle: boolean = false\n\n  constructor(public color: \"white\" | \"black\") { }\n  \n  get king():King {\n    return this.pieces.find((value,index,obj) => {\n      return value instanceof King\n    }) as King\n  }\n\n  get kingHasMoved() {\n    return this.king.hasMoved\n  }\n\n  get kingSideRook():Rook {\n    return this.pieces.find((value,index,obj) => {\n      return value instanceof Rook && value.kingSideRook\n    }) as Rook\n  }\n\n  get kingSideRookHasMoved() {\n    if(!this.kingSideRook) return true\n    \n    return this.kingSideRook.hasMoved\n  }\n\n  get queenSideRook():Rook {\n    return this.pieces.find((value,index,obj) => {\n      return value instanceof Rook && !value.kingSideRook\n    }) as Rook\n  }\n\n  get queenSideRookHasMoved() {\n    if(!this.queenSideRook) return true\n\n    return this.queenSideRook.hasMoved\n  }\n\n  \n  clone() {\n    return new Player(this.color)\n  }\n  toString() {\n    return `${this.color} player, pieces: ${this.pieces}, in check: ${this.inCheck}, in stalemate: ${this.inStalemate}, in checkmate: ${this.inCheckmate}`\n  }\n}","import Bishop from \"./ChessPieces/Bishop\";\nimport ChessTile from \"./ChessTile\"\nimport Knight from \"./ChessPieces/Knight\";\nimport Pawn from \"./ChessPieces/Pawn\";\nimport Rook from \"./ChessPieces/Rook\";\nimport Queen from \"./ChessPieces/Queen\";\nimport King from \"./ChessPieces/King\";\nimport ChessPiece from \"./ChessPieces/ChessPiece\";\nimport Player from \"./Player\";\nimport ILightPattern from \"./LightPatterns/ILightPattern\";\nimport { getFile, getRank } from \"./ChessPieces/util\";\n\ntype BoardPosition = {\n  x:number\n  y:number\n}\n\n/**\n * Builds the board and keeps track of the game state (selected piece, current player etc)\n * \n * The board is an x/y grid drawn top to bottom left to right\n */\nexport default class ChessBoard {\n  redraw: boolean = true\n  boardTiles: Array<Array<ChessTile>> = []\n  flatTileList: Array<ChessTile> = []\n  players: Array<Player> = []\n  counter = 0\n  selectedPiece: ChessPiece\n\n  get currentPlayersTurn(): \"white\" | \"black\" {\n    return this.currentPlayer.color\n  }\n  currentPlayer: Player\n  get whitePlayer() {\n    return this.players[0]\n  }\n  get blackPlayer() {\n    return this.players[1]\n  }\n\n  constructor(private targetElement:string, autoSetupPieces:boolean = true) {\n    this.setupDataModel()\n    if(autoSetupPieces)\n      this.setupPiecesOnBoard()\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for tile to get (0-7)\n   * @param y Vetical offset from 0 for tile to get (0-7)\n   * @returns A ChessTile if one exists at the position or null if the position is out of bounds\n   */\n  getTileAtPosition(x: number, y: number): ChessTile | null {\n    try {\n      return this.boardTiles[y][x];\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for Piece to get (0-7)\n   * @param y Vertical offset from 0 for Piece to get (0-7)\n   * @returns Piece on tile at given position or null if no piece or invalid tile\n   */\n  getPieceAtPosition(x: number, y: number): ChessPiece | null {\n    try {\n      return this.boardTiles[y][x].currentPiece\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * \n   * @param x Horizontal offset from 0 for Piece to select (0-7)\n   * @param y Vertical offset from 0 for Piece to select (0-7)\n   * @returns The selected piece if a piece existed on the tile at the given position or null if no piece or tile at position\n   */\n  selectPiece(x: number, y: number): ChessPiece | null {\n    // Don't return a piece if a tile has a piece, but the piece isn't the same color as the current player\n    this.selectedPiece = this.getPieceAtPosition(x, y)\n\n    // console.log(`Selected Piece: ${this.selectedPiece} on board: ${this.targetElement}`)\n    return this.selectedPiece\n  }\n\n  isPlayerInCheckAfterClonedBoardMove(fromTile: BoardPosition, toTile: BoardPosition):boolean {\n    let clonedBoardState = this.clone()\n    clonedBoardState.movePiecePosition(fromTile, toTile)\n    clonedBoardState.redraw = true\n    clonedBoardState.updateDisplay()\n    return clonedBoardState.checkIfPlayerIsInCheck()\n  }\n\n  /**\n   * Method will move a piece from one tile to another so long as the move\n   * doesn't put or leave the current player's king in check.\n   * \n   * @param fromTile The tile to move the piece from\n   * @param toTile The tile to move the piece to\n   * @returns [boolean] true if the piece was moved false if it was not\n   */\n  movePiece(fromTile: ChessTile, toTile: ChessTile, withChecking:boolean=true): boolean {\n    console.log(`moving piece from: ${fromTile}, to: ${toTile} on board: ${this.targetElement}`)\n\n    // Cloning the current board so can simulate the move and see if the\n    // current players king is left in check\n    if(withChecking)\n    {\n      let willMovePutPlayerIntoCheck = this.isPlayerInCheckAfterClonedBoardMove(fromTile, toTile)\n      console.log(`will move leave player in check ${willMovePutPlayerIntoCheck}`)\n  \n      if(willMovePutPlayerIntoCheck) return false\n    }\n    \n    const isPlayerPieceOnTile = piece => piece != toTile.currentPiece\n\n    if(toTile.currentPiece) {\n      if(toTile.currentPiece.color==\"white\")\n      this.players[0].pieces = this.players[0].pieces.filter(isPlayerPieceOnTile)\n      if(toTile.currentPiece.color==\"black\")\n      this.players[1].pieces = this.players[1].pieces.filter(isPlayerPieceOnTile)\n    }\n\n    // Moves the selected pieces from the from to tile to the to tile\n    toTile.currentPiece = fromTile.currentPiece\n    toTile.currentPiece.hasMoved = true\n\n    if (toTile.currentPiece instanceof Pawn) {\n      if(toTile.y == 0 || toTile.y==7) {\n        let theNewQueen = new Queen(this.boardTiles, toTile.y, toTile.x, toTile.currentPiece.color)\n        this.currentPlayer.pieces.splice(this.currentPlayer.pieces.indexOf(toTile.currentPiece), 1, theNewQueen)\n        toTile.currentPiece = theNewQueen\n      }\n    }\n\n    fromTile.currentPiece = null\n    toTile.currentPiece.currentTile = toTile\n\n    if(toTile.currentPiece instanceof King){\n      if(toTile.canKingSideCastle) {\n        const kingSideRook = this.currentPlayer.kingSideRook\n        this.movePiecePosition(kingSideRook.currentTile, {x: toTile.x-1, y: toTile.y})\n        kingSideRook.hasMoved = true\n      }\n      if(toTile.canQueenSideCastle) {\n        const queenSideRook = this.currentPlayer.queenSideRook\n        this.movePiecePosition(queenSideRook.currentTile, {x: toTile.x+1, y: toTile.y})\n        queenSideRook.hasMoved = true\n      }\n    }\n\n    return true\n  }\n\n  // This method doesn't depend on being passed the tile itself necessarily it\n  // will use the given position to find the \n  movePiecePosition(fromPosition: BoardPosition, toPosition: BoardPosition) {\n    let fromTile = this.getTileAtPosition(fromPosition.x, fromPosition.y)\n    let toTile = this.getTileAtPosition(toPosition.x, toPosition.y)\n\n    this.movePiece(fromTile, toTile, false)\n  }\n\n  /**\n   * Sets the isValidPosition to false for all tiles\n   */\n  markAllInvalid() {\n    this.flatTileList.forEach(light => light.isValidPosition = false)\n  }\n\n  /**\n   * Sets up the initial data model(s) for the tiles, creates all the rows\n   * that make up the grid of tiles and populates each row with tiles\n   */\n  setupDataModel() {\n    for (let y = 0; y < 8; y++) {\n      this.makeRow(y)\n    }\n\n    // setup link list references between objects\n    let prevLight\n    for (let i = 0; i < this.flatTileList.length; i++) {\n      const currentLight = this.flatTileList[i];\n      currentLight.prevLight = prevLight\n      if (i < this.flatTileList.length - 1) {\n        currentLight.nextLight = this.flatTileList[i + 1]\n      }\n    }\n\n    this.flatTileList[0].prevLight = this.flatTileList[this.flatTileList.length - 1]\n    this.flatTileList[this.flatTileList.length - 1].nextLight = this.flatTileList[0]\n  }\n\n  setupPiecesOnBoard() {\n    // White back row\n    let whiteRook1 = new Rook(this.boardTiles, 0, 0)\n    let whiteKnight1 = new Knight(this.boardTiles, 0, 1)\n    let whiteBishop1 = new Bishop(this.boardTiles, 0, 2)\n    let whiteQueen = new Queen(this.boardTiles, 0, 3)\n    let whiteKing = new King(this.boardTiles, 0, 4)\n    let whiteBishop2 = new Bishop(this.boardTiles, 0, 5)\n    let whiteKnight2 = new Knight(this.boardTiles, 0, 6)\n    let whiteRook2 = new Rook(this.boardTiles, 0, 7)\n    whiteRook2.kingSideRook = true\n\n    // Black back row\n    let blackRook1 = new Rook(this.boardTiles, 7, 0, \"black\")\n    let blackKnight1 = new Knight(this.boardTiles, 7, 1, \"black\")\n    let blackBishop1 = new Bishop(this.boardTiles, 7, 2, \"black\")\n    let blackQueen = new Queen(this.boardTiles, 7, 3, \"black\")\n    let blackKing = new King(this.boardTiles, 7, 4, \"black\")\n    let blackBishop2 = new Bishop(this.boardTiles, 7, 5, \"black\")\n    let blackKnight2 = new Knight(this.boardTiles, 7, 6, \"black\")\n    let blackRook2 = new Rook(this.boardTiles, 7, 7, \"black\")\n    blackRook2.kingSideRook = true\n\n    const whitePawns = []\n    const blackPawns = []\n\n    for (let x = 0; x < 8; x++) {\n      // White pawns\n      const whitePawn = new Pawn(this.boardTiles, 1, x)\n      whitePawns.push(whitePawn)\n\n      // Black pawns\n      const blackPawn = new Pawn(this.boardTiles, 6, x, \"black\")\n      blackPawns.push(blackPawn)\n    }\n\n    const player1 = new Player(\"white\")\n    player1.pieces = [whiteRook1, whiteRook2, whiteKnight1, whiteKnight2, whiteBishop1, whiteBishop2, whiteQueen, whiteKing, ...whitePawns]\n\n    const player2 = new Player(\"black\")\n    player2.pieces = [blackRook1, blackRook2, blackKnight1, blackKnight2, blackBishop1, blackBishop2, blackQueen, blackKing, ...blackPawns]\n\n    this.players = [player1, player2]\n\n    this.currentPlayer = player1\n  }\n\n  changeCurrentPlayer() {\n    this.turnOffAllTileLights();\n    this.markAllInvalid();\n    this.currentPlayer.inCheck = this.checkIfPlayerIsInCheck();\n    console.debug(`checked current player is in check while changing players ${this.currentPlayer}`)\n\n    this.currentPlayer = this.currentPlayer === this.players[0] ? this.players[1] : this.players[0];\n    console.debug(`Switched players is now ${this.currentPlayer} turn`)\n\n    // Checking if the new player is now in check.\n    this.currentPlayer.inCheck = this.checkIfPlayerIsInCheck();\n    if(this.currentPlayer.inCheck) {\n      console.debug(`Checking if ${this.currentPlayer.color} in checkmate`)\n      this.currentPlayer.inCheckmate = this.cannotMakeAnyMoveWithoutLeavingKingInCheck()\n    } else {\n      console.debug(`Checking if ${this.currentPlayer.color} in stalemate`)\n      this.currentPlayer.inStalemate = this.cannotMakeAnyMoveWithoutLeavingKingInCheck()\n    }\n    console.debug(`done with checks:\\n${this.currentPlayer}`)\n  }\n\n  makeRow(rowNum: number) {\n    this.boardTiles[rowNum] = []\n\n    for (let x = 0; x < 8; x++) {\n      const newLightObject = new ChessTile(this.counter++, x, rowNum)\n\n      this.boardTiles[rowNum].push(newLightObject)\n\n      this.flatTileList.push(newLightObject)\n    }\n  }\n\n  checkIfPlayerIsInCheck(targetPlayer:Player = this.currentPlayer):boolean {\n    const otherPlayer = this.whitePlayer == targetPlayer ? this.blackPlayer : this.whitePlayer\n\n    let kingIsInCheck = false\n    otherPlayer.pieces.forEach(piece => {\n      const validMoves = piece.findValidMoves(this)\n      // If king is in check\n      if(targetPlayer.king && validMoves.find(val => val.x == targetPlayer.king.currentTile.x && val.y == targetPlayer.king.currentTile.y) ) {\n        kingIsInCheck = true\n      }\n    })\n    return kingIsInCheck\n  }\n\n  /**\n   * Will see if moving any of the target player's pieces will result in the\n   * player no longer being in check, will be called only if the target players\n   * king is already known to be in check currently\n   * \n   * @param targetPlayer The player to see if cannot make a move to get out of\n   * check mate\n   */\n  cannotMakeAnyMoveWithoutLeavingKingInCheck(targetPlayer:Player = this.currentPlayer) {\n    // For each of the target players pieces we'll clone the board, make the valid move and see if the player\n    // is in check on the cloned board.\n    let anyMoveGetsKingOutofCheck = false\n    targetPlayer.pieces.forEach(piece => {\n      const clonedBoard = this.clone()\n      const validMoves = piece.findValidMoves(clonedBoard)\n      validMoves.forEach(move => {\n        anyMoveGetsKingOutofCheck = anyMoveGetsKingOutofCheck || !clonedBoard.isPlayerInCheckAfterClonedBoardMove(piece.currentTile, move)\n      })\n    })\n    return !anyMoveGetsKingOutofCheck\n  }\n\n  checkIfCastlingPossible(player:Player = this.currentPlayer) {\n    console.log(\"check for castling\")\n\n    // setting both false until check if can castle on either side\n    player.canKingSideCastle = false\n    player.canQueenSideCastle = false\n\n    if(!player.kingHasMoved && !player.kingSideRookHasMoved) {\n\n      const { x:kingX, y:kingY } = player.king.currentTile\n\n      const tileNextTo = this.getTileAtPosition(kingX+1,kingY)\n      const tileTwoOver = this.getTileAtPosition(kingX+2,kingY)\n      \n      if(tileNextTo?.currentPiece == null && tileTwoOver?.currentPiece == null) {\n        player.canKingSideCastle = true\n        console.log(\"king side castling possible\")\n      }\n\n    }\n\n    if(!player.kingHasMoved && !player.queenSideRookHasMoved) {\n      const { x:kingX, y:kingY } = player.king.currentTile\n\n      const tileNextTo = this.getTileAtPosition(kingX-1,kingY)\n      const tileTwoOver = this.getTileAtPosition(kingX-2,kingY)\n      const tileThreeOver = this.getTileAtPosition(kingX-3,kingY)\n      if(tileNextTo?.currentPiece == null && tileTwoOver?.currentPiece == null && tileThreeOver?.currentPiece == null) {\n        player.canQueenSideCastle = true\n        console.log(\"queen side castling possible\")\n      }\n    }\n  }\n\n  checkIfEnPassantPossible() {\n\n  }\n\n\n  clone() {\n    const clonedBoard = new ChessBoard('hypothetical-board', false)\n\n    // Cloning players so can maniuplate their pieces in new board states\n    clonedBoard.players = this.players.map(player=>player.clone())\n\n    clonedBoard.currentPlayer = this.currentPlayer.color == \"white\" ? clonedBoard.whitePlayer : clonedBoard.blackPlayer\n\n\n    // Cloning board tiles so can manipulate what piece is on what tile without \n    // effecting the actual game being played.\n    clonedBoard.boardTiles = this.boardTiles.map<Array<ChessTile>>((rowOfTiles) => {\n        const newRowOfTiles = rowOfTiles.map(singleTile => {\n          const clonedTile = singleTile.clone()\n          if(singleTile.currentPiece) {\n            clonedTile.currentPiece = singleTile.currentPiece.clone(clonedBoard.boardTiles)\n            if(clonedTile.currentPiece) {\n              if(clonedTile.currentPiece.color == \"black\")\n                clonedBoard.blackPlayer.pieces.push(clonedTile.currentPiece)\n              if(clonedTile.currentPiece.color == \"white\")\n                clonedBoard.whitePlayer.pieces.push(clonedTile.currentPiece)\n            }\n          }\n          return clonedTile\n        })\n        return newRowOfTiles\n    })\n    clonedBoard.selectPiece(this.selectedPiece.currentTile.x, this.selectedPiece.currentTile.y)\n    clonedBoard.tileClickHandler(clonedBoard.selectedPiece.currentTile)\n    clonedBoard.drawInitialBoard()\n    clonedBoard.updateDisplay()\n    return clonedBoard\n  }\n\n  tileClickHandler(tile: ChessTile) {\n\n    // Spot is marked valid then try to make the move with current selected piece\n    if (tile.isValidPosition) {\n\n      // Try to move the piece, if the piece moves successfully then change players\n      if(this.movePiece(this.selectedPiece.currentTile, tile)) {\n        this.changeCurrentPlayer();\n      }\n    }\n    // If we didn't select a valid position to move a piece to check to see if we\n    // selected a new piece\n    else {\n      this.markAllInvalid();\n      let selectedPiece = this.selectPiece(tile.x, tile.y)\n\n      let wasOn = tile.isOn;\n      this.turnOffAllTileLights();\n      this.checkIfCastlingPossible()\n\n\n      if (selectedPiece && selectedPiece.color == this.currentPlayersTurn) {\n        tile.isOn = !wasOn\n        if (tile.isOn) {\n          let validMoves = selectedPiece.findValidMoves(this)\n\n          // King side castling\n          if(selectedPiece instanceof King && this.currentPlayer.canKingSideCastle) {\n            const {x: kingX, y: kingY} = this.currentPlayer.king.currentTile\n            const tileTwoOver = this.getTileAtPosition(kingX+2,kingY)\n            tileTwoOver.canKingSideCastle = true\n\n            validMoves.push(tileTwoOver)\n          }\n          // Queen side castling\n          if(selectedPiece instanceof King && this.currentPlayer.canQueenSideCastle) {\n            const {x: kingX, y: kingY} = this.currentPlayer.king.currentTile\n            const tileTwoOver = this.getTileAtPosition(kingX-2,kingY)\n            tileTwoOver.canQueenSideCastle = true\n\n            validMoves.push(tileTwoOver)\n          }\n\n          validMoves.forEach(validMove => {\n            // Marking all the valid moves for the selected piece on the board\n            let potentialMovePosition = this.getTileAtPosition(validMove.x, validMove.y)\n            if(potentialMovePosition){\n              potentialMovePosition.isValidPosition = true\n              potentialMovePosition.isOn = true\n            }\n          })\n        }\n      }\n    }\n\n    this.redraw = true\n  }\n  \n\n  /**\n   * return Array of currently lit positions\n   */\n  findCurrentlyLit() {\n    return this.flatTileList.filter(element => element.isOn)\n  }\n\n  /**\n   * Sets the isOn property to false for all tiles\n   */\n  turnOffAllTileLights() {\n    this.flatTileList.forEach(tile => {\n      tile.isOn = false\n      tile.canKingSideCastle = false\n      tile.canQueenSideCastle = false\n    })\n  }\n\n  \n  /**\n   * Called on an interval to update the DOM elements that represent the board\n   * visually based on the board model\n   */\n  updateDisplay(lightMode:ILightPattern = null) {\n\n    // If using a lighting mode then update the tile light pattern on each display update\n    if (lightMode) {\n      lightMode.updatePattern(this)\n      this.redraw = true\n    }\n\n    // If chessboard marked for redraw (after moves) update all the tile styles and contents\n    if(this.redraw) {\n      let gameStatusText = \"\"\n\n      if(this.whitePlayer.inCheck)\n        gameStatusText += \"White player is in check. \"\n      if(this.blackPlayer.inCheck)\n        gameStatusText += \"Black player is in check. \"\n\n      if(this.whitePlayer.inCheckmate)\n        gameStatusText = \"White player is in checkmate. GG\"\n      if(this.blackPlayer.inCheckmate)\n        gameStatusText = \"Black player is in checkmate. GG\"\n\n      if(this.whitePlayer.inStalemate || this.blackPlayer.inStalemate)\n        gameStatusText = \"Game is in stalemate. GG\"\n\n      document.getElementById('game-status').innerHTML = gameStatusText\n\n      this.flatTileList.forEach(tile => {\n  \n        let curTileElm = document.getElementById(`${this.targetElement}-tile-${tile.id}`)\n        const onOrOffTile = tile.isOn ? 'on' : 'off'\n  \n        const newClassName = `chess-tile ${onOrOffTile} tile-color-${tile.tileBaseColor}`\n        if(curTileElm.className != newClassName)\n        curTileElm.className = `chess-tile ${onOrOffTile} tile-color-${tile.tileBaseColor}`\n  \n\n        let curTileSymbolElm = document.getElementById(`${this.targetElement}-tilesymbol-${tile.id}`)\n\n        if (tile.currentPiece) {\n          curTileSymbolElm.style.color = tile.currentPiece.color\n        }\n  \n        let displayText = \"\"\n        if (tile.currentPiece) {\n          displayText = tile.currentPiece.pieceSymbol()\n        }\n  \n        curTileSymbolElm.innerHTML = `${displayText}`\n      })\n      this.redraw = false\n    }\n  }\n\n  /**\n   * Clears out and rebuilds the DOM elements for the board based on the board model\n   * deals with finding valid moves and highlighting cells on the board based on the\n   * board model\n   */\n  drawInitialBoard() {\n    let chessBoard = document.getElementById(this.targetElement)\n\n    // Emptying out the elements from the board container\n    while (chessBoard.firstChild) {\n      chessBoard.removeChild(chessBoard.firstChild);\n    }\n\n    // Maps all the tiles row by row into DOM elements\n    const boardRowDOMElms = this.boardTiles\n      .map((tileRow) => {\n\n        // Maps all the cells of a given row into DOM elements\n        const cells = tileRow.map((tile) => {\n          let tileDiv = document.createElement('div')\n          tileDiv.className = `chess-tile ${tile.id % 2 == 0 ? 'even' : 'odd'}  ${tile.isOn ? 'on' : 'off'} tile-color-${tile.tileBaseColor}`\n          tileDiv.id = `${this.targetElement}-tile-${tile.id}`\n          tileDiv.style.position = \"relative\"\n\n          tileDiv.addEventListener('click', () => { this.tileClickHandler(tile) })\n\n          let tileNumDiv = document.createElement('div')\n          tileNumDiv.style.position = \"absolute\"\n          tileNumDiv.style.top = \"4px\"\n          tileNumDiv.style.left = \"4px\"\n          tileNumDiv.style.fontSize = \"1rem\"\n          tileNumDiv.style.color = \"rgba(255,255,255,.5)\"\n          tileNumDiv.innerHTML = `${getRank(tile.x)}${getFile(tile.y)}`\n          tileDiv.appendChild(tileNumDiv)\n\n\n          let tileSymbolSpan = document.createElement('span')\n          tileSymbolSpan.id = `${this.targetElement}-tilesymbol-${tile.id}`\n          tileDiv.appendChild(tileSymbolSpan)\n\n          return tileDiv\n        })\n        let rowDiv = document.createElement('div')\n        rowDiv.className = 'row'\n        cells.forEach(cell => { rowDiv.appendChild(cell) })\n        return rowDiv\n      })\n    boardRowDOMElms.forEach(boardRowDOMElm => chessBoard.appendChild(boardRowDOMElm))\n\n  }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class RowPattern implements ILightPattern {\n    currentlyLitLightRow = 0\n    updatePattern(currentBoard:ChessBoard): void {\n        currentBoard.turnOffAllTileLights()\n\n        currentBoard.boardTiles[this.currentlyLitLightRow].forEach(lightData => lightData.isOn = true)\n        this.currentlyLitLightRow++\n        if(this.currentlyLitLightRow >= currentBoard.boardTiles.length) {\n            this.currentlyLitLightRow = 0\n        }\n    }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class SequencePattern implements ILightPattern {\n    firstRun = true\n    constructor() {\n    }\n    updatePattern(currentBoard:ChessBoard): void {\n        if(this.firstRun) {\n            currentBoard.turnOffAllTileLights()\n            currentBoard.flatTileList[0].isOn = true\n            this.firstRun = false\n        }\n        let currentlyLit = currentBoard.findCurrentlyLit()\n        \n        if(currentlyLit.length > 0) {\n\n            for (let i = currentlyLit.length - 1; 0 <= i; i--) {\n                const lightData = currentlyLit[i];\n                \n                lightData.isOn = false;\n                lightData.nextLight.isOn = true;\n            }\n        }\n    }\n}","import ChessBoard from \"../ChessBoard\";\nimport ILightPattern from \"./ILightPattern\";\n\nexport class SnakePattern implements ILightPattern {\n    snakeHead = 0\n    snakeLength = 12\n    updatePattern(currentBoard:ChessBoard): void {\n        currentBoard.turnOffAllTileLights()\n\n        let snakeHeadElm = currentBoard.flatTileList[this.snakeHead]\n        snakeHeadElm.isOn = true\n\n        let curLight = snakeHeadElm\n        for (let i = 0; i < this.snakeLength; i++) {\n            curLight = curLight.nextLight\n            curLight.isOn = true\n            if(i==0)\n                this.snakeHead = curLight.id\n        }\n    }\n}","import ChessBoard from \"./ChessBoard\"\nimport ILightPattern from \"./LightPatterns/ILightPattern\"\nimport { RowPattern } from \"./LightPatterns/RowPattern\"\nimport { SequencePattern } from \"./LightPatterns/SequencePattern\"\nimport { SnakePattern } from \"./LightPatterns/SnakePattern\"\n\nexport class ChessLightsMain {\n  chessBoard: ChessBoard\n  mode: ILightPattern\n\n  constructor() {\n    // Waiting for page to be loaded to get the elements on the page and add\n    // listeners/setup the game\n    window.addEventListener('DOMContentLoaded', () => {\n\n      // Listener for the drop down menu\n      document.getElementById('mode').addEventListener('change', (event) => {\n        this.changeMode(event)\n      })\n\n      setInterval(() => {\n        this.chessBoard.updateDisplay(this.mode)\n      }, 100)\n\n      this.chessBoard = new ChessBoard('chess-board')\n      this.chessBoard.drawInitialBoard()\n      // this.mode = new SequencePattern()\n    });\n  }\n\n\n  /**\n   * Method handles drop down change events and creates the corresponding light\n   * pattern/sequence handler.  Used primarily for prototyping LED patterns for\n   * LED chess board.\n   * \n   * @param event an event from the select/options dropdown, the event.target.value is used to determine which Pattern instance to create\n   */\n  changeMode(event) {\n    switch (event.target.value) {\n      case 'snake': this.mode = new SnakePattern()\n        break;\n      case 'sequence': this.mode = new SequencePattern()\n        break;\n      case 'row': this.mode = new RowPattern()\n        break;\n      case 'none': this.mode = null\n        break;\n    }\n  }\n  \n}\nnew ChessLightsMain()"],"names":["$b22d20f8eed3c195$export$2e2bcd8739ae039","boardTiles","x","y","color","hasMoved","this","currentTile","currentPiece","direction","myPos","toString","pieceSymbol","$0d26fdf8bf377e35$export$2e2bcd8739ae039","findValidMoves","boardState","validPositions","i","j","curTile","getTileAtPosition","push","i1","j1","i2","j2","i3","j3","clone","$22951f0e8b3292c6$export$2b71294f39aa2536","index","$22951f0e8b3292c6$export$8b3ca78f81ec578c","$19302002edd8d79c$export$2e2bcd8739ae039","tileBaseColor","id","isOn","hue","saturation","brightness","$4f1600a5f2f06aab$export$2e2bcd8739ae039","forEach","tile","$f1ffc8d94fc3f9eb$export$2e2bcd8739ae039","tileTL","tileTR","addTilePositionIfValid","pieceOneAhead","getPieceAtPosition","$c374f64110df5620$export$2e2bcd8739ae039","kingSideRook","$1ef2ac3924524536$export$2e2bcd8739ae039","i4","i5","i6","i7","$6364cc4a6fd49207$export$2e2bcd8739ae039","tileOneAbove","tileOneBelow","tileOneLeft","tileOneRight","tileBL","tileBR","$ac5fb69ba5837957$export$2e2bcd8739ae039","pieces","inCheck","inCheckmate","inStalemate","canKingSideCastle","canQueenSideCastle","king","find","value","obj","kingHasMoved","kingSideRookHasMoved","queenSideRook","queenSideRookHasMoved","$b07460e442fde56f$export$2e2bcd8739ae039","currentPlayersTurn","currentPlayer","whitePlayer","players","blackPlayer","targetElement","autoSetupPieces","redraw","flatTileList","counter","setupDataModel","setupPiecesOnBoard","e","selectPiece","selectedPiece","isPlayerInCheckAfterClonedBoardMove","fromTile","toTile","clonedBoardState","movePiecePosition","updateDisplay","checkIfPlayerIsInCheck","movePiece","withChecking","console","log","willMovePutPlayerIntoCheck","isPlayerPieceOnTile","piece","filter","theNewQueen","splice","indexOf","fromPosition","toPosition","markAllInvalid","light","isValidPosition","makeRow","length","currentLight","prevLight","nextLight","whiteRook1","whiteKnight1","whiteBishop1","whiteQueen","whiteKing","whiteBishop2","whiteKnight2","whiteRook2","blackRook1","blackKnight1","blackBishop1","blackQueen","blackKing","blackBishop2","blackKnight2","blackRook2","whitePawns","blackPawns","whitePawn","blackPawn","player1","player2","changeCurrentPlayer","turnOffAllTileLights","debug","cannotMakeAnyMoveWithoutLeavingKingInCheck","rowNum","newLightObject","targetPlayer","otherPlayer","kingIsInCheck","validMoves","val","anyMoveGetsKingOutofCheck","clonedBoard","move","checkIfCastlingPossible","player","kingX","kingY","tileNextTo","tileTwoOver","tileThreeOver","checkIfEnPassantPossible","map","rowOfTiles","singleTile","clonedTile","tileClickHandler","drawInitialBoard","wasOn","validMove","potentialMovePosition","findCurrentlyLit","element","lightMode","updatePattern","gameStatusText","document","getElementById","innerHTML","curTileElm","onOrOffTile","newClassName","className","curTileSymbolElm","style","displayText","chessBoard","firstChild","removeChild","tileRow","cells","tileDiv","createElement","position","addEventListener","tileNumDiv","top","left","fontSize","appendChild","tileSymbolSpan","rowDiv","cell","boardRowDOMElm","$665c16453abd97af$export$8f903ef488e4ee0f","currentBoard","currentlyLitLightRow","lightData","$848bce31666e74a9$export$8dceea515d6747fc","firstRun","currentlyLit","$d4542aa2ee8a2b32$export$da9194b27e270081","snakeHeadElm","snakeHead","curLight","snakeLength","window","event","changeMode","setInterval","mode","target"],"version":3,"file":"index.1cb69025.js.map"}