class e{constructor(e,t,i,r="white",s=!1){this.color=r,this.hasMoved=s,this.currentTile=null,e[t][i].currentPiece=this,this.currentTile=e[t][i]}get direction(){return"white"===this.color?1:-1}get myPos(){return{x:this.currentTile.x,y:this.currentTile.y}}toString(){return`${this.pieceSymbol()}`}}class t extends e{findValidMoves(e){const t=[],{myPos:i}=this;for(let r=i.x+1,s=i.y+1;r<8&&s<8;r++,s++){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}for(let r=i.x-1,s=i.y-1;r>=0&&s>=0;r--,s--){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}for(let r=i.x+1,s=i.y-1;r<8&&s>=0;r++,s--){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}for(let r=i.x-1,s=i.y+1;r>=0&&s<8;r--,s++){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}return t}clone(e){return new t(e,this.currentTile.y,this.currentTile.x,this.color)}constructor(...e){super(...e),this.pieceSymbol=()=>"black"==this.color?"♝":"♗"}}function i(e){return["a","b","c","d","e","f","g","h"][e]}function r(e){return 8-e}class s{get tileBaseColor(){return(this.id+this.y%2)%2==0?"black":"white"}constructor(e,t,i,r=!1,s=0,c=100,n=50){this.isOn=r,this.hue=s,this.saturation=c,this.brightness=n,this.id=e,this.x=t,this.y=i}clone(){return new s(this.id,this.x,this.y)}toString(){return`${r(this.x)}${i(this.y)} with Piece ${this.currentPiece}`}}class c extends e{findValidMoves(e){const t=[],{myPos:i}=this;return[e.getTileAtPosition(i.x+2,i.y+1),e.getTileAtPosition(i.x+1,i.y+2),e.getTileAtPosition(i.x-2,i.y+1),e.getTileAtPosition(i.x-1,i.y+2),e.getTileAtPosition(i.x-2,i.y-1),e.getTileAtPosition(i.x-1,i.y-2),e.getTileAtPosition(i.x+2,i.y-1),e.getTileAtPosition(i.x+1,i.y-2)].forEach((e=>{e&&(e.currentPiece&&e.currentPiece.color==this.color||t.push(e))})),t}clone(e){return new c(e,this.currentTile.y,this.currentTile.x,this.color)}constructor(...e){super(...e),this.pieceSymbol=()=>"black"==this.color?"♞":"♘"}}class n extends e{findValidMoves(e){const t=[],{myPos:i,direction:r}=this;let s=e.getTileAtPosition(i.x+r,i.y+r),c=e.getTileAtPosition(i.x-r,i.y+r);const n=e=>{e&&e.currentPiece&&e.currentPiece.color!=this.color&&t.push({x:e.x,y:e.y})};[s,c].forEach((e=>n(e)));let o=e.getPieceAtPosition(i.x,i.y+r);if(o||t.push({x:i.x,y:i.y+r}),!this.hasMoved&&!o){e.getPieceAtPosition(i.x,i.y+2*r)||t.push({x:i.x,y:i.y+2*r})}return t}clone(e){return new n(e,this.currentTile.y,this.currentTile.x,this.color)}constructor(...e){super(...e),this.pieceSymbol=()=>"black"==this.color?"♟︎":"♙"}}class o extends e{findValidMoves(e){const t=[],{myPos:i}=this;for(let r=i.x-1;r>=0;r--){let s=e.getTileAtPosition(r,i.y);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}for(let r=i.x+1;r<8;r++){let s=e.getTileAtPosition(r,i.y);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}for(let r=i.y-1;r>=0;r--){let s=e.getTileAtPosition(i.x,r);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}for(let r=i.y+1;r<8;r++){let s=e.getTileAtPosition(i.x,r);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}return t}clone(e){return new o(e,this.currentTile.y,this.currentTile.x,this.color)}constructor(...e){super(...e),this.kingSideRook=!1,this.pieceSymbol=()=>"black"==this.color?"♜":"♖"}}class l extends e{findValidMoves(e){const t=[],{myPos:i}=this;for(let r=i.x-1;r>=0;r--){let s=e.getTileAtPosition(r,i.y);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}for(let r=i.x+1;r<8;r++){let s=e.getTileAtPosition(r,i.y);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}for(let r=i.y-1;r>=0;r--){let s=e.getTileAtPosition(i.x,r);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}for(let r=i.y+1;r<8;r++){let s=e.getTileAtPosition(i.x,r);if(s.currentPiece&&s.currentPiece.color==this.color)break;if(s.currentPiece&&s.currentPiece.color!=this.color){t.push(s);break}s&&t.push(s)}for(let r=i.x+1,s=i.y+1;r<8&&s<8;r++,s++){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}for(let r=i.x-1,s=i.y-1;r>=0&&s>=0;r--,s--){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}for(let r=i.x+1,s=i.y-1;r<8&&s>=0;r++,s--){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}for(let r=i.x-1,s=i.y+1;r>=0&&s<8;r--,s++){let i=e.getTileAtPosition(r,s);if(i.currentPiece&&i.currentPiece.color==this.color)break;if(i.currentPiece&&i.currentPiece.color!=this.color){t.push(i);break}i&&t.push(i)}return t}clone(e){return new l(e,this.currentTile.y,this.currentTile.x,this.color)}constructor(...e){super(...e),this.pieceSymbol=()=>"black"==this.color?"♛":"♕"}}class h extends e{findValidMoves(e){const t=[],{myPos:i,direction:r}=this;let s=e.getTileAtPosition(i.x,i.y+r),c=e.getTileAtPosition(i.x,i.y-r),n=e.getTileAtPosition(i.x-1,i.y),o=e.getTileAtPosition(i.x+1,i.y),l=e.getTileAtPosition(i.x+r,i.y+r),h=e.getTileAtPosition(i.x+r,i.y-r),a=e.getTileAtPosition(i.x-r,i.y+r),u=e.getTileAtPosition(i.x-r,i.y-r);const P=e=>{e&&(!e.currentPiece||e.currentPiece&&e.currentPiece.color!=this.color)&&t.push({x:e.x,y:e.y})};return[s,c,n,o,l,h,a,u].forEach((e=>{P(e)})),t}clone(e){return new h(e,this.currentTile.y,this.currentTile.x,this.color)}constructor(...e){super(...e),this.pieceSymbol=()=>"black"==this.color?"♚":"♔"}}class a{constructor(e){this.color=e,this.pieces=[],this.inCheck=!1,this.inCheckmate=!1,this.inStalemate=!1,this.canKingSideCastle=!1,this.canQueenSideCastle=!1}get king(){return this.pieces.find(((e,t,i)=>e instanceof h))}get kingHasMoved(){return this.king.hasMoved}get kingSideRook(){return this.pieces.find(((e,t,i)=>e instanceof o&&e.kingSideRook))}get kingSideRookHasMoved(){return!this.kingSideRook||this.kingSideRook.hasMoved}get queenSideRook(){return this.pieces.find(((e,t,i)=>e instanceof o&&!e.kingSideRook))}get queenSideRookHasMoved(){return!this.queenSideRook||this.queenSideRook.hasMoved}clone(){return new a(this.color)}toString(){return`${this.color} player, pieces: ${this.pieces}, in check: ${this.inCheck}, in stalemate: ${this.inStalemate}, in checkmate: ${this.inCheckmate}`}}class u{get currentPlayersTurn(){return this.currentPlayer.color}get whitePlayer(){return this.players[0]}get blackPlayer(){return this.players[1]}constructor(e,t=!0){this.targetElement=e,this.redraw=!0,this.boardTiles=[],this.flatTileList=[],this.players=[],this.counter=0,this.setupDataModel(),t&&this.setupPiecesOnBoard()}getTileAtPosition(e,t){try{return this.boardTiles[t][e]}catch(e){return null}}getPieceAtPosition(e,t){try{return this.boardTiles[t][e].currentPiece}catch(e){return null}}selectPiece(e,t){return this.selectedPiece=this.getPieceAtPosition(e,t),this.selectedPiece}isPlayerInCheckAfterClonedBoardMove(e,t){let i=this.clone();return i.movePiecePosition(e,t),i.redraw=!0,i.updateDisplay(),i.checkIfPlayerIsInCheck()}movePiece(e,t,i=!0){if(console.log(`moving piece from: ${e}, to: ${t} on board: ${this.targetElement}`),i){let i=this.isPlayerInCheckAfterClonedBoardMove(e,t);if(console.log(`will move leave player in check ${i}`),i)return!1}const r=e=>e!=t.currentPiece;if(t.currentPiece&&("white"==t.currentPiece.color&&(this.players[0].pieces=this.players[0].pieces.filter(r)),"black"==t.currentPiece.color&&(this.players[1].pieces=this.players[1].pieces.filter(r))),t.currentPiece=e.currentPiece,t.currentPiece.hasMoved=!0,t.currentPiece instanceof n&&(0==t.y||7==t.y)){let e=new l(this.boardTiles,t.y,t.x,t.currentPiece.color);this.currentPlayer.pieces.splice(this.currentPlayer.pieces.indexOf(t.currentPiece),1,e),t.currentPiece=e}if(e.currentPiece=null,t.currentPiece.currentTile=t,t.currentPiece instanceof h){if(t.canKingSideCastle){const e=this.currentPlayer.kingSideRook;this.movePiecePosition(e.currentTile,{x:t.x-1,y:t.y}),e.hasMoved=!0}if(t.canQueenSideCastle){const e=this.currentPlayer.queenSideRook;this.movePiecePosition(e.currentTile,{x:t.x+1,y:t.y}),e.hasMoved=!0}}return!0}movePiecePosition(e,t){let i=this.getTileAtPosition(e.x,e.y),r=this.getTileAtPosition(t.x,t.y);this.movePiece(i,r,!1)}markAllInvalid(){this.flatTileList.forEach((e=>e.isValidPosition=!1))}setupDataModel(){for(let e=0;e<8;e++)this.makeRow(e);for(let e=0;e<this.flatTileList.length;e++){const t=this.flatTileList[e];t.prevLight=undefined,e<this.flatTileList.length-1&&(t.nextLight=this.flatTileList[e+1])}this.flatTileList[0].prevLight=this.flatTileList[this.flatTileList.length-1],this.flatTileList[this.flatTileList.length-1].nextLight=this.flatTileList[0]}setupPiecesOnBoard(){let e=new o(this.boardTiles,0,0),i=new c(this.boardTiles,0,1),r=new t(this.boardTiles,0,2),s=new l(this.boardTiles,0,3),u=new h(this.boardTiles,0,4),P=new t(this.boardTiles,0,5),d=new c(this.boardTiles,0,6),y=new o(this.boardTiles,0,7);y.kingSideRook=!0;let g=new o(this.boardTiles,7,0,"black"),f=new c(this.boardTiles,7,1,"black"),k=new t(this.boardTiles,7,2,"black"),p=new l(this.boardTiles,7,3,"black"),T=new h(this.boardTiles,7,4,"black"),b=new t(this.boardTiles,7,5,"black"),m=new c(this.boardTiles,7,6,"black"),x=new o(this.boardTiles,7,7,"black");x.kingSideRook=!0;const w=[],A=[];for(let e=0;e<8;e++){const t=new n(this.boardTiles,1,e);w.push(t);const i=new n(this.boardTiles,6,e,"black");A.push(i)}const C=new a("white");C.pieces=[e,y,i,d,r,P,s,u,...w];const v=new a("black");v.pieces=[g,x,f,m,k,b,p,T,...A],this.players=[C,v],this.currentPlayer=C}changeCurrentPlayer(){this.turnOffAllTileLights(),this.markAllInvalid(),this.currentPlayer.inCheck=this.checkIfPlayerIsInCheck(),console.debug(`checked current player is in check while changing players ${this.currentPlayer}`),this.currentPlayer=this.currentPlayer===this.players[0]?this.players[1]:this.players[0],console.debug(`Switched players is now ${this.currentPlayer} turn`),this.currentPlayer.inCheck=this.checkIfPlayerIsInCheck(),this.currentPlayer.inCheck?(console.debug(`Checking if ${this.currentPlayer.color} in checkmate`),this.currentPlayer.inCheckmate=this.cannotMakeAnyMoveWithoutLeavingKingInCheck()):(console.debug(`Checking if ${this.currentPlayer.color} in stalemate`),this.currentPlayer.inStalemate=this.cannotMakeAnyMoveWithoutLeavingKingInCheck()),console.debug(`done with checks:\n${this.currentPlayer}`)}makeRow(e){this.boardTiles[e]=[];for(let t=0;t<8;t++){const i=new s(this.counter++,t,e);this.boardTiles[e].push(i),this.flatTileList.push(i)}}checkIfPlayerIsInCheck(e=this.currentPlayer){const t=this.whitePlayer==e?this.blackPlayer:this.whitePlayer;let i=!1;return t.pieces.forEach((t=>{const r=t.findValidMoves(this);e.king&&r.find((t=>t.x==e.king.currentTile.x&&t.y==e.king.currentTile.y))&&(i=!0)})),i}cannotMakeAnyMoveWithoutLeavingKingInCheck(e=this.currentPlayer){let t=!1;return e.pieces.forEach((e=>{const i=this.clone();e.findValidMoves(i).forEach((r=>{t=t||!i.isPlayerInCheckAfterClonedBoardMove(e.currentTile,r)}))})),!t}checkIfCastlingPossible(e=this.currentPlayer){if(console.log("check for castling"),e.canKingSideCastle=!1,e.canQueenSideCastle=!1,!e.kingHasMoved&&!e.kingSideRookHasMoved){const{x:t,y:i}=e.king.currentTile,r=this.getTileAtPosition(t+1,i),s=this.getTileAtPosition(t+2,i);null==r?.currentPiece&&null==s?.currentPiece&&(e.canKingSideCastle=!0,console.log("king side castling possible"))}if(!e.kingHasMoved&&!e.queenSideRookHasMoved){const{x:t,y:i}=e.king.currentTile,r=this.getTileAtPosition(t-1,i),s=this.getTileAtPosition(t-2,i),c=this.getTileAtPosition(t-3,i);null==r?.currentPiece&&null==s?.currentPiece&&null==c?.currentPiece&&(e.canQueenSideCastle=!0,console.log("queen side castling possible"))}}checkIfEnPassantPossible(){}clone(){const e=new u("hypothetical-board",!1);return e.players=this.players.map((e=>e.clone())),e.currentPlayer="white"==this.currentPlayer.color?e.whitePlayer:e.blackPlayer,e.boardTiles=this.boardTiles.map((t=>t.map((t=>{const i=t.clone();return t.currentPiece&&(i.currentPiece=t.currentPiece.clone(e.boardTiles),i.currentPiece&&("black"==i.currentPiece.color&&e.blackPlayer.pieces.push(i.currentPiece),"white"==i.currentPiece.color&&e.whitePlayer.pieces.push(i.currentPiece))),i})))),e.selectPiece(this.selectedPiece.currentTile.x,this.selectedPiece.currentTile.y),e.tileClickHandler(e.selectedPiece.currentTile),e.drawInitialBoard(),e.updateDisplay(),e}tileClickHandler(e){if(e.isValidPosition)this.movePiece(this.selectedPiece.currentTile,e)&&this.changeCurrentPlayer();else{this.markAllInvalid();let t=this.selectPiece(e.x,e.y),i=e.isOn;if(this.turnOffAllTileLights(),this.checkIfCastlingPossible(),t&&t.color==this.currentPlayersTurn&&(e.isOn=!i,e.isOn)){let e=t.findValidMoves(this);if(t instanceof h&&this.currentPlayer.canKingSideCastle){const{x:t,y:i}=this.currentPlayer.king.currentTile,r=this.getTileAtPosition(t+2,i);r.canKingSideCastle=!0,e.push(r)}if(t instanceof h&&this.currentPlayer.canQueenSideCastle){const{x:t,y:i}=this.currentPlayer.king.currentTile,r=this.getTileAtPosition(t-2,i);r.canQueenSideCastle=!0,e.push(r)}e.forEach((e=>{let t=this.getTileAtPosition(e.x,e.y);t&&(t.isValidPosition=!0,t.isOn=!0)}))}}this.redraw=!0}findCurrentlyLit(){return this.flatTileList.filter((e=>e.isOn))}turnOffAllTileLights(){this.flatTileList.forEach((e=>{e.isOn=!1,e.canKingSideCastle=!1,e.canQueenSideCastle=!1}))}updateDisplay(e=null){if(e&&(e.updatePattern(this),this.redraw=!0),this.redraw){let e="";this.whitePlayer.inCheck&&(e+="White player is in check. "),this.blackPlayer.inCheck&&(e+="Black player is in check. "),this.whitePlayer.inCheckmate&&(e="White player is in checkmate. GG"),this.blackPlayer.inCheckmate&&(e="Black player is in checkmate. GG"),(this.whitePlayer.inStalemate||this.blackPlayer.inStalemate)&&(e="Game is in stalemate. GG"),document.getElementById("game-status").innerHTML=e,this.flatTileList.forEach((e=>{let t=document.getElementById(`${this.targetElement}-tile-${e.id}`);const i=e.isOn?"on":"off",r=`chess-tile ${i} tile-color-${e.tileBaseColor}`;t.className!=r&&(t.className=`chess-tile ${i} tile-color-${e.tileBaseColor}`);let s=document.getElementById(`${this.targetElement}-tilesymbol-${e.id}`);e.currentPiece&&(s.style.color=e.currentPiece.color);let c="";e.currentPiece&&(c=e.currentPiece.pieceSymbol()),s.innerHTML=`${c}`})),this.redraw=!1}}drawInitialBoard(){let e=document.getElementById(this.targetElement);for(;e.firstChild;)e.removeChild(e.firstChild);this.boardTiles.map((e=>{const t=e.map((e=>{let t=document.createElement("div");t.className=`chess-tile ${e.id%2==0?"even":"odd"}  ${e.isOn?"on":"off"} tile-color-${e.tileBaseColor}`,t.id=`${this.targetElement}-tile-${e.id}`,t.style.position="relative",t.addEventListener("click",(()=>{this.tileClickHandler(e)}));let s=document.createElement("div");s.style.position="absolute",s.style.top="4px",s.style.left="4px",s.style.fontSize="1rem",s.style.color="rgba(255,255,255,.5)",s.innerHTML=`${i(e.x)}${r(e.y)}`,t.appendChild(s);let c=document.createElement("span");return c.id=`${this.targetElement}-tilesymbol-${e.id}`,t.appendChild(c),t}));let s=document.createElement("div");return s.className="row",t.forEach((e=>{s.appendChild(e)})),s})).forEach((t=>e.appendChild(t)))}}class P{updatePattern(e){e.turnOffAllTileLights(),e.boardTiles[this.currentlyLitLightRow].forEach((e=>e.isOn=!0)),this.currentlyLitLightRow++,this.currentlyLitLightRow>=e.boardTiles.length&&(this.currentlyLitLightRow=0)}constructor(){this.currentlyLitLightRow=0}}class d{constructor(){this.firstRun=!0}updatePattern(e){this.firstRun&&(e.turnOffAllTileLights(),e.flatTileList[0].isOn=!0,this.firstRun=!1);let t=e.findCurrentlyLit();if(t.length>0)for(let e=t.length-1;0<=e;e--){const i=t[e];i.isOn=!1,i.nextLight.isOn=!0}}}class y{updatePattern(e){e.turnOffAllTileLights();let t=e.flatTileList[this.snakeHead];t.isOn=!0;let i=t;for(let e=0;e<this.snakeLength;e++)i=i.nextLight,i.isOn=!0,0==e&&(this.snakeHead=i.id)}constructor(){this.snakeHead=0,this.snakeLength=12}}new class{constructor(){window.addEventListener("DOMContentLoaded",(()=>{document.getElementById("mode").addEventListener("change",(e=>{this.changeMode(e)})),setInterval((()=>{this.chessBoard.updateDisplay(this.mode)}),100),this.chessBoard=new u("chess-board"),this.chessBoard.drawInitialBoard()}))}changeMode(e){switch(e.target.value){case"snake":this.mode=new y;break;case"sequence":this.mode=new d;break;case"row":this.mode=new P;break;case"none":this.mode=null}}};
//# sourceMappingURL=index.1cb69025.js.map
